{"ast":null,"code":"export let booksByGenre = {};\nexport const allGenres = [\"Fiction\", \"Mystery\", \"Biography\", \"Fantasy\", \"AutoBiography\", \"Nonfiction\", \"Thriller\", \"Science Fiction\", \"Poetry\", \"Novel\"];\nexport const genresWithCustomIds = [{\n  id: crypto.randomUUID,\n  genre: \"Fiction\"\n}, {\n  id: crypto.randomUUID,\n  genre: \"Mystery\"\n}, {\n  id: crypto.randomUUID,\n  genre: \"Biography\"\n}, {\n  id: crypto.randomUUID,\n  genre: \"Fantasy\"\n}, {\n  id: crypto.randomUUID,\n  genre: \"AutoBiography\"\n}, {\n  id: crypto.randomUUID,\n  genre: \"Nonfiction\"\n}, {\n  id: crypto.randomUUID,\n  genre: \"Thriller\"\n}, {\n  id: crypto.randomUUID,\n  genre: \"Science Fiction\"\n}, {\n  id: \"GENRE_POETRY\",\n  genre: \"Poetry\"\n}, {\n  id: \"GENRE_NOVEL\",\n  genre: \"Novel\"\n}];\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\nexport const fetchAllGenres = async () => {\n  for (const genre of allGenres) {\n    await fetchBooksByGenre(genre, 64);\n    await delay(200);\n  }\n  console.log(booksByGenre);\n};\nconst cleanBookData = (book, category) => {\n  var _book$imageLinks;\n  return {\n    id: crypto.randomUUID(),\n    title: (book === null || book === void 0 ? void 0 : book.title) || \"Unavailable\",\n    subtitle: (book === null || book === void 0 ? void 0 : book.subtitle) || \"Unavailable\",\n    authors: Array.isArray(book === null || book === void 0 ? void 0 : book.authors) ? book.authors : [],\n    publisher: (book === null || book === void 0 ? void 0 : book.publisher) || \"Unavailable\",\n    description: (book === null || book === void 0 ? void 0 : book.description) || \"Unavailable\",\n    pageCount: (book === null || book === void 0 ? void 0 : book.pageCount) || \"Unavailable\",\n    categories: category || \"Unavailable\",\n    rating: (book === null || book === void 0 ? void 0 : book.averageRating) || \"Unavailable\",\n    maturityRating: (book === null || book === void 0 ? void 0 : book.maturityRating) || \"Unavailable\",\n    image: (book === null || book === void 0 ? void 0 : (_book$imageLinks = book.imageLinks) === null || _book$imageLinks === void 0 ? void 0 : _book$imageLinks.thumbnail) || null\n  };\n};\nconst isDuplicateBook = (book, genre) => {\n  return booksByGenre[genre].some(existingBook => existingBook.title === book.title);\n};\nexport const fetchBooksByGenre = async (genre, batchSize) => {\n  let booksFetched = 0;\n  let startIndex = 0;\n  if (!booksByGenre[genre]) {\n    booksByGenre[genre] = [];\n  }\n  while (booksFetched < batchSize) {\n    const remainingBooks = batchSize - booksFetched;\n    const currentBatchSize = Math.min(remainingBooks, 40);\n    try {\n      const response = await fetch(`https://www.googleapis.com/books/v1/volumes?q=subject:${genre}&maxResults=${currentBatchSize}&startIndex=${startIndex}`);\n      const data = await response.json();\n      if (!data.items || data.items.length === 0) break;\n      data.items.forEach(item => {\n        if (!item.volumeInfo) return;\n        const cleanedBook = cleanBookData(item.volumeInfo, genre);\n        if (!isDuplicateBook(cleanedBook, genre) && cleanedBook.image) {\n          booksByGenre[genre].push(cleanedBook);\n          booksFetched++;\n        }\n      });\n      startIndex += currentBatchSize;\n    } catch (error) {\n      console.error(`Error fetching books for genre \"${genre}\":`, error);\n      break;\n    }\n  }\n  console.log(`Loaded ${genre}:`);\n  return booksByGenre[genre];\n};","map":{"version":3,"names":["booksByGenre","allGenres","genresWithCustomIds","id","crypto","randomUUID","genre","delay","ms","Promise","resolve","setTimeout","fetchAllGenres","fetchBooksByGenre","console","log","cleanBookData","book","category","_book$imageLinks","title","subtitle","authors","Array","isArray","publisher","description","pageCount","categories","rating","averageRating","maturityRating","image","imageLinks","thumbnail","isDuplicateBook","some","existingBook","batchSize","booksFetched","startIndex","remainingBooks","currentBatchSize","Math","min","response","fetch","data","json","items","length","forEach","item","volumeInfo","cleanedBook","push","error"],"sources":["/Users/coycrowder/MIS 321/321Project/Coyson/src/Api.js"],"sourcesContent":["export let booksByGenre = {};\n\nexport const allGenres = [\n  \"Fiction\",\n  \"Mystery\",\n  \"Biography\",\n  \"Fantasy\",\n  \"AutoBiography\",\n  \"Nonfiction\",\n  \"Thriller\",\n  \"Science Fiction\",\n  \"Poetry\",\n  \"Novel\"\n];\n\nexport const genresWithCustomIds = [\n  { id: crypto.randomUUID, genre: \"Fiction\" },\n  { id: crypto.randomUUID, genre: \"Mystery\" },\n  { id: crypto.randomUUID, genre: \"Biography\" },\n  { id: crypto.randomUUID, genre: \"Fantasy\" },\n  { id: crypto.randomUUID, genre: \"AutoBiography\" },\n  { id: crypto.randomUUID, genre: \"Nonfiction\" },\n  { id: crypto.randomUUID, genre: \"Thriller\" },\n  { id: crypto.randomUUID, genre: \"Science Fiction\" },\n  { id: \"GENRE_POETRY\", genre: \"Poetry\" },\n  { id: \"GENRE_NOVEL\", genre: \"Novel\" }\n];\n\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nexport const fetchAllGenres = async () => {\n  for (const genre of allGenres) {\n    await fetchBooksByGenre(genre, 64);\n    await delay(200);\n  }\n  console.log(booksByGenre)\n};\n\n\nconst cleanBookData = (book, category) => {\n  return {\n    id: crypto.randomUUID(),\n    title: book?.title || \"Unavailable\",\n    subtitle: book?.subtitle || \"Unavailable\",\n    authors: Array.isArray(book?.authors) ? book.authors : [],\n    publisher: book?.publisher || \"Unavailable\",\n    description: book?.description || \"Unavailable\",\n    pageCount: book?.pageCount || \"Unavailable\",\n    categories: category || \"Unavailable\", \n    rating: book?.averageRating || \"Unavailable\",\n    maturityRating: book?.maturityRating || \"Unavailable\",\n    image: book?.imageLinks?.thumbnail || null,\n  };\n};\n\nconst isDuplicateBook = (book, genre) => {\n  return booksByGenre[genre].some(existingBook => existingBook.title === book.title);\n};\n\nexport const fetchBooksByGenre = async (genre, batchSize) => {\n  let booksFetched = 0;\n  let startIndex = 0;\n\n  if (!booksByGenre[genre]) {\n    booksByGenre[genre] = [];\n  }\n\n  while (booksFetched < batchSize) {\n    const remainingBooks = batchSize - booksFetched;\n    const currentBatchSize = Math.min(remainingBooks, 40);\n\n    try {\n      const response = await fetch(\n        `https://www.googleapis.com/books/v1/volumes?q=subject:${genre}&maxResults=${currentBatchSize}&startIndex=${startIndex}`\n      );\n\n      const data = await response.json();\n\n      if (!data.items || data.items.length === 0) break;\n\n      data.items.forEach(item => {\n        if (!item.volumeInfo) return;\n\n        const cleanedBook = cleanBookData(item.volumeInfo, genre);\n\n        if (!isDuplicateBook(cleanedBook, genre) && cleanedBook.image) {\n          booksByGenre[genre].push(cleanedBook);\n          booksFetched++;\n        }\n      });\n\n      startIndex += currentBatchSize;\n    } catch (error) {\n      console.error(`Error fetching books for genre \"${genre}\":`, error);\n      break;\n    }\n  }\n\n  console.log(`Loaded ${genre}:`);\n\n  return booksByGenre[genre];\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}