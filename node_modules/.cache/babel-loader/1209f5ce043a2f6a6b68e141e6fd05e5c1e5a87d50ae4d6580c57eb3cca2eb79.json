{"ast":null,"code":"export let books;\n// Function to clean book data\nconst cleanBookData = book => {\n  return {\n    title: book.title || \"Unavailable\",\n    subtitle: book.subtitle || \"Unavailable\",\n    authors: book.authors && book.authors.length > 0 ? book.authors.join(\", \") : \"Unavailable\",\n    publisher: book.publisher || \"Unavailable\",\n    description: book.description || \"Unavailable\",\n    pageCount: book.pageCount || \"Unavailable\",\n    categories: book.categories && book.categories.length > 0 ? book.categories.join(\", \") : \"Unavailable\",\n    rating: book.averageRating || \"Unavailable\",\n    maturityRating: book.maturityRating || \"Unavailable\",\n    image: book.imageLinks ? book.imageLinks.thumbnail : \"Unavailable\"\n  };\n};\n\n// Function to fetch fiction books and organize them into categories\nexport const fetchFictionBooks = async batchSize => {\n  let response = await fetch(`https://www.googleapis.com/books/v1/volumes?q=fiction&maxResults=${batchSize}`);\n  let data = await response.json();\n\n  // Prepare a dictionary for books by category\n  let booksByCategory = {\n    Fiction: []\n  };\n  data.items.forEach(item => {\n    const bookInfo = item.volumeInfo;\n    const cleanedBook = cleanBookData(bookInfo); // Clean data before adding\n    booksByCategory.Fiction.push(cleanedBook); // Add cleaned book to Fiction category\n  });\n\n  // Log the booksByCategory to see the results\n  console.log(booksByCategory); // You can check the structure in the console.\n  return booksByCategory; // Return the books organized by category\n};","map":{"version":3,"names":["books","cleanBookData","book","title","subtitle","authors","length","join","publisher","description","pageCount","categories","rating","averageRating","maturityRating","image","imageLinks","thumbnail","fetchFictionBooks","batchSize","response","fetch","data","json","booksByCategory","Fiction","items","forEach","item","bookInfo","volumeInfo","cleanedBook","push","console","log"],"sources":["/Users/coycrowder/MIS 321/react/my-app/src/api.js"],"sourcesContent":["export let books\n// Function to clean book data\nconst cleanBookData = (book) => {\n    return {\n      title: book.title || \"Unavailable\",\n      subtitle: book.subtitle || \"Unavailable\",\n      authors: (book.authors && book.authors.length > 0) ? book.authors.join(\", \") : \"Unavailable\",\n      publisher: book.publisher || \"Unavailable\",\n      description: book.description || \"Unavailable\",\n      pageCount: book.pageCount || \"Unavailable\",\n      categories: book.categories && book.categories.length > 0 ? book.categories.join(\", \") : \"Unavailable\",\n      rating: book.averageRating || \"Unavailable\",\n      maturityRating: book.maturityRating || \"Unavailable\",\n      image: book.imageLinks ? book.imageLinks.thumbnail : \"Unavailable\",\n    };\n  };\n  \n  // Function to fetch fiction books and organize them into categories\n  export const fetchFictionBooks = async (batchSize) => {\n    let response = await fetch(`https://www.googleapis.com/books/v1/volumes?q=fiction&maxResults=${batchSize}`);\n    let data = await response.json();\n  \n    // Prepare a dictionary for books by category\n    let booksByCategory = {\n      Fiction: []\n    };\n  \n    data.items.forEach(item => {\n      const bookInfo = item.volumeInfo;\n      const cleanedBook = cleanBookData(bookInfo); // Clean data before adding\n      booksByCategory.Fiction.push(cleanedBook);  // Add cleaned book to Fiction category\n    });\n  \n    // Log the booksByCategory to see the results\n    console.log(booksByCategory);  // You can check the structure in the console.\n    return booksByCategory;  // Return the books organized by category\n  };  "],"mappings":"AAAA,OAAO,IAAIA,KAAK;AAChB;AACA,MAAMC,aAAa,GAAIC,IAAI,IAAK;EAC5B,OAAO;IACLC,KAAK,EAAED,IAAI,CAACC,KAAK,IAAI,aAAa;IAClCC,QAAQ,EAAEF,IAAI,CAACE,QAAQ,IAAI,aAAa;IACxCC,OAAO,EAAGH,IAAI,CAACG,OAAO,IAAIH,IAAI,CAACG,OAAO,CAACC,MAAM,GAAG,CAAC,GAAIJ,IAAI,CAACG,OAAO,CAACE,IAAI,CAAC,IAAI,CAAC,GAAG,aAAa;IAC5FC,SAAS,EAAEN,IAAI,CAACM,SAAS,IAAI,aAAa;IAC1CC,WAAW,EAAEP,IAAI,CAACO,WAAW,IAAI,aAAa;IAC9CC,SAAS,EAAER,IAAI,CAACQ,SAAS,IAAI,aAAa;IAC1CC,UAAU,EAAET,IAAI,CAACS,UAAU,IAAIT,IAAI,CAACS,UAAU,CAACL,MAAM,GAAG,CAAC,GAAGJ,IAAI,CAACS,UAAU,CAACJ,IAAI,CAAC,IAAI,CAAC,GAAG,aAAa;IACtGK,MAAM,EAAEV,IAAI,CAACW,aAAa,IAAI,aAAa;IAC3CC,cAAc,EAAEZ,IAAI,CAACY,cAAc,IAAI,aAAa;IACpDC,KAAK,EAAEb,IAAI,CAACc,UAAU,GAAGd,IAAI,CAACc,UAAU,CAACC,SAAS,GAAG;EACvD,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,SAAS,IAAK;EACpD,IAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oEAAoEF,SAAS,EAAE,CAAC;EAC3G,IAAIG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;EAEhC;EACA,IAAIC,eAAe,GAAG;IACpBC,OAAO,EAAE;EACX,CAAC;EAEDH,IAAI,CAACI,KAAK,CAACC,OAAO,CAACC,IAAI,IAAI;IACzB,MAAMC,QAAQ,GAAGD,IAAI,CAACE,UAAU;IAChC,MAAMC,WAAW,GAAG9B,aAAa,CAAC4B,QAAQ,CAAC,CAAC,CAAC;IAC7CL,eAAe,CAACC,OAAO,CAACO,IAAI,CAACD,WAAW,CAAC,CAAC,CAAE;EAC9C,CAAC,CAAC;;EAEF;EACAE,OAAO,CAACC,GAAG,CAACV,eAAe,CAAC,CAAC,CAAE;EAC/B,OAAOA,eAAe,CAAC,CAAE;AAC3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}