{"ast":null,"code":"export let booksByGenre = {};\nconst cleanBookData = (book, category) => {\n  var _book$imageLinks;\n  return {\n    title: (book === null || book === void 0 ? void 0 : book.title) || \"Unavailable\",\n    subtitle: (book === null || book === void 0 ? void 0 : book.subtitle) || \"Unavailable\",\n    authors: Array.isArray(book === null || book === void 0 ? void 0 : book.authors) ? book.authors : [],\n    publisher: (book === null || book === void 0 ? void 0 : book.publisher) || \"Unavailable\",\n    description: (book === null || book === void 0 ? void 0 : book.description) || \"Unavailable\",\n    pageCount: (book === null || book === void 0 ? void 0 : book.pageCount) || \"Unavailable\",\n    categories: category || \"Unavailable\",\n    rating: (book === null || book === void 0 ? void 0 : book.averageRating) || \"Unavailable\",\n    maturityRating: (book === null || book === void 0 ? void 0 : book.maturityRating) || \"Unavailable\",\n    image: (book === null || book === void 0 ? void 0 : (_book$imageLinks = book.imageLinks) === null || _book$imageLinks === void 0 ? void 0 : _book$imageLinks.thumbnail) || null // Set to null if no image is available\n  };\n};\n\n// Function to check if a book is already in the booksByGenre dictionary\nconst isDuplicateBook = (book, genre) => {\n  return booksByGenre[genre].some(existingBook => existingBook.title === book.title);\n};\nexport const fetchBooksByGenre = async (genre, batchSize) => {\n  let booksFetched = 0;\n  let startIndex = 0;\n  if (!booksByGenre[genre]) {\n    booksByGenre[genre] = [];\n  }\n  while (booksFetched < batchSize) {\n    const remainingBooks = batchSize - booksFetched;\n    const currentBatchSize = Math.min(remainingBooks, 40);\n    try {\n      const response = await fetch(`https://www.googleapis.com/books/v1/volumes?q=subject:${genre}&maxResults=${currentBatchSize}&startIndex=${startIndex}`);\n      const data = await response.json();\n      if (!data.items || data.items.length === 0) break;\n      data.items.forEach(item => {\n        if (!item.volumeInfo) return;\n        const cleanedBook = cleanBookData(item.volumeInfo, genre);\n        if (!isDuplicateBook(cleanedBook, genre) && cleanedBook.image) {\n          booksByGenre[genre].push(cleanedBook);\n          booksFetched++;\n        }\n      });\n      startIndex += currentBatchSize;\n    } catch (error) {\n      console.error(`Error fetching books for genre \"${genre}\":`, error);\n      break;\n    }\n  }\n  return booksByGenre;\n};","map":{"version":3,"names":["booksByGenre","cleanBookData","book","category","_book$imageLinks","title","subtitle","authors","Array","isArray","publisher","description","pageCount","categories","rating","averageRating","maturityRating","image","imageLinks","thumbnail","isDuplicateBook","genre","some","existingBook","fetchBooksByGenre","batchSize","booksFetched","startIndex","remainingBooks","currentBatchSize","Math","min","response","fetch","data","json","items","length","forEach","item","volumeInfo","cleanedBook","push","error","console"],"sources":["/Users/coycrowder/MIS 321/321Project/Coyson/src/Api.js"],"sourcesContent":["export let booksByGenre = {};\n\nconst cleanBookData = (book, category) => {\n  return {\n    title: book?.title || \"Unavailable\",\n    subtitle: book?.subtitle || \"Unavailable\",\n    authors: Array.isArray(book?.authors) ? book.authors : [],\n    publisher: book?.publisher || \"Unavailable\",\n    description: book?.description || \"Unavailable\",\n    pageCount: book?.pageCount || \"Unavailable\",\n    categories: category || \"Unavailable\", \n    rating: book?.averageRating || \"Unavailable\",\n    maturityRating: book?.maturityRating || \"Unavailable\",\n    image: book?.imageLinks?.thumbnail || null, // Set to null if no image is available\n  };\n};\n\n// Function to check if a book is already in the booksByGenre dictionary\nconst isDuplicateBook = (book, genre) => {\n  return booksByGenre[genre].some(existingBook => existingBook.title === book.title);\n};\n\nexport const fetchBooksByGenre = async (genre, batchSize) => {\n  let booksFetched = 0;\n  let startIndex = 0;\n\n  if (!booksByGenre[genre]) {\n    booksByGenre[genre] = [];\n  }\n\n  while (booksFetched < batchSize) {\n    const remainingBooks = batchSize - booksFetched;\n    const currentBatchSize = Math.min(remainingBooks, 40);\n\n    try {\n      const response = await fetch(\n        `https://www.googleapis.com/books/v1/volumes?q=subject:${genre}&maxResults=${currentBatchSize}&startIndex=${startIndex}`\n      );\n\n      const data = await response.json();\n\n      if (!data.items || data.items.length === 0) break;\n\n      data.items.forEach(item => {\n        if (!item.volumeInfo) return;\n\n        const cleanedBook = cleanBookData(item.volumeInfo, genre);\n\n        if (!isDuplicateBook(cleanedBook, genre) && cleanedBook.image) {\n          booksByGenre[genre].push(cleanedBook);\n          booksFetched++;\n        }\n      });\n\n      startIndex += currentBatchSize;\n    } catch (error) {\n      console.error(`Error fetching books for genre \"${genre}\":`, error);\n      break;\n    }\n  }\n\n  return booksByGenre;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}