{"ast":null,"code":"var _s = $RefreshSig$();\nimport { GetBookByID } from \"./BookData\";\nimport { useUser } from './UserContext';\nexport let booksByGenre = {};\nexport const allGenres = [\"Fiction\", \"Mystery\", \"Biography\", \"Fantasy\", \"AutoBiography\", \"Nonfiction\", \"Thriller\", \"Science Fiction\", \"Poetry\", \"Novel\"];\nexport const genreIDs = [{\n  id: 101,\n  genre: \"Fiction\"\n}, {\n  id: 102,\n  genre: \"Mystery\"\n}, {\n  id: 103,\n  genre: \"Biography\"\n}, {\n  id: 104,\n  genre: \"Fantasy\"\n}, {\n  id: 105,\n  genre: \"AutoBiography\"\n}, {\n  id: 106,\n  genre: \"Nonfiction\"\n}, {\n  id: 107,\n  genre: \"Thriller\"\n}, {\n  id: 108,\n  genre: \"Science Fiction\"\n}, {\n  id: 109,\n  genre: \"Poetry\"\n}, {\n  id: 110,\n  genre: \"Novel\"\n}];\nexport function AddBookToDB(book) {\n  fetch('http://localhost:5000/api/Book', {\n    method: 'POST',\n    headers: {\n      'accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      genreID: book.genreid,\n      title: book.title,\n      subtitle: book.subtitle,\n      authors: book.authors,\n      publisher: book.publisher,\n      description: book.description,\n      pageCount: book.pageCount,\n      categories: book.categories,\n      rating: book.rating,\n      maturityRating: book.maturityRating,\n      image: book.image,\n      price: book.price\n    })\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    return response.text();\n  }).then(data => {\n    console.log(\"Success:\", data);\n  }).catch(error => {\n    console.error(\"Error:\", error);\n  });\n}\n_c = AddBookToDB;\nexport const GetBookByGenre = async genreID => {\n  const response = await fetch(`http://localhost:5000/api/book/genre/${genreID}`);\n  if (!response.ok) {\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n  const books = await response.json();\n  if (!booksByGenre[genreID]) {\n    booksByGenre[genreID] = [];\n  }\n  books.forEach(book => {\n    booksByGenre[genreID].push(book);\n  });\n};\n_c2 = GetBookByGenre;\nexport const AuthenticateUser = async ({\n  token,\n  name,\n  email,\n  profileImg\n}) => {\n  try {\n    const response = await fetch(\"http://localhost:5000/api/user/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        token,\n        name,\n        email,\n        profileImg\n      })\n    });\n    if (!response.ok) {\n      throw new Error(\"User authentication failed.\");\n    }\n    const user = await response.json();\n    return {\n      id: user.id,\n      token: user.token,\n      name: user.name,\n      email: user.email,\n      profileImg: user.profileImg,\n      role: user.role,\n      points: user.points,\n      dateCreated: user.created\n    };\n  } catch (error) {\n    console.error(\"Error authenticating user:\", error);\n    return false;\n  }\n};\n_c3 = AuthenticateUser;\nexport const FetchCart = async userId => {\n  try {\n    var _data$cartItems;\n    const response = await fetch(`http://localhost:5000/api/cart/fetchcart?userId=${userId}`);\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch cart\");\n    }\n    const data = await response.json();\n    return (_data$cartItems = data.cartItems) !== null && _data$cartItems !== void 0 ? _data$cartItems : [];\n  } catch (error) {\n    console.error(\"Cart fetch error:\", error);\n    return [];\n  }\n};\n_c4 = FetchCart;\nexport const AddToCart = async (userId, bookId, price) => {\n  try {\n    const response = await fetch(`http://localhost:5000/api/cart/addtocart?userId=${userId}&bookId=${bookId}&price=${price}`, {\n      method: \"POST\"\n    });\n    if (!response.ok) throw new Error(\"Add to cart failed.\");\n    const updatedCart = await FetchCart(userId); // Pull updated cart\n    return updatedCart;\n  } catch (error) {\n    console.error(\"Error adding to cart:\", error);\n    return null;\n  }\n};\n\n// Take the price, if the user applied their points, and add the transaction to the database. Then reset their points if used and reset their active cart.\n_c5 = AddToCart;\nexport async function CompleteTransaction(applyPoints) {\n  _s();\n  const {\n    user\n  } = useUser();\n  user.books.forEach(book => {\n    // Each book purchased\n  });\n  if (applyPoints) {\n    // If user chose to apply their reward points, each point is 1 cent\n  }\n\n  // Reset books in cart and points\n}\n_s(CompleteTransaction, \"Q+JCVIy3JH0MXpFK+vm68eAxsAY=\", false, function () {\n  return [useUser];\n});\n_c6 = CompleteTransaction;\nexport const Checkout = async userId => {\n  try {\n    const response = await fetch(`http://localhost:5000/api/cart/checkout?userId=${userId}`, {\n      method: \"POST\"\n    });\n    if (!response.ok) throw new Error(\"Checkout failed.\");\n    return true;\n  } catch (error) {\n    console.error(\"Checkout error:\", error);\n    return false;\n  }\n};\n_c7 = Checkout;\nexport const ClearCart = setUser => {\n  setUser(prev => ({\n    ...prev,\n    cart: []\n  }));\n};\n_c8 = ClearCart;\nexport const UpdateCartQuantity = async (userId, bookId, quantity) => {\n  try {\n    const response = await fetch(`http://localhost:5000/api/cart/updatequantity?userId=${userId}&bookId=${bookId}&quantity=${quantity}`, {\n      method: \"PUT\"\n    });\n    if (!response.ok) throw new Error(\"Failed to update quantity\");\n    return true;\n  } catch (error) {\n    console.error(\"UpdateCartQuantity error:\", error);\n    return false;\n  }\n};\n_c9 = UpdateCartQuantity;\nexport const RemoveFromCart = async (userId, bookId) => {\n  try {\n    const response = await fetch(`http://localhost:5000/api/cart/removefromcart?userId=${userId}&bookId=${bookId}`, {\n      method: \"DELETE\"\n    });\n    if (!response.ok) throw new Error(\"Failed to remove item\");\n    return true;\n  } catch (error) {\n    console.error(\"RemoveFromCart error:\", error);\n    return false;\n  }\n};\n\n/*  All Commented Below is for fetching books from Google API\n\nconst getRandomPrice = () => {\n  const prices = [19.99, 24.99, 29.99, 34.99, 39.99];\n  const randomIndex = Math.floor(Math.random() * prices.length);\n  return prices[randomIndex];\n};\n\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nexport const fetchAllGenres = async () => {\n  for (const genre of allGenres) {\n    await fetchBooksByGenre(genre, 64);\n    await delay(200);\n  }\n  console.log(booksByGenre);\n};\n\nconst cleanBookData = (book, matchedGenres) => {\n  const genreid = genreIDs.find(g => g.genre === matchedGenres[0])?.id ?? null;\n  count++;\n\n  return {\n    genreid: typeof genreid === \"number\" ? genreid : null,\n    title: book?.title ?? \"Unavailable\",\n    subtitle: book?.subtitle ?? null,\n    authors: Array.isArray(book?.authors) \n      ? (book.authors[0] ?? \"Unavailable\") \n      : (book?.authors ?? \"Unavailable\"),\n    publisher: book?.publisher ?? null,\n    description: book?.description ?? null,\n    pageCount: typeof book?.pageCount === \"number\" ? book.pageCount : null,\n    categories: Array.isArray(matchedGenres) \n      ? (matchedGenres[0] ?? null) \n      : (matchedGenres ?? null),\n    rating: typeof book?.averageRating === \"number\" ? book.averageRating : null,\n    maturityRating: book?.maturityRating ?? null,\n    image: book?.imageLinks?.thumbnail ?? null,\n    price: getRandomPrice()\n  }  \n};\n\n\nconst isDuplicateBook = (book, genre) => {\n  return booksByGenre[genre]?.some(existingBook => existingBook.title === book.title) ?? false;\n};\n\n\nexport const fetchBooksByGenre = async (genre, batchSize) => {\n  let booksFetched = 0;\n  let startIndex = 0;\n\n  \n  while (booksFetched < batchSize) {\n    const remainingBooks = batchSize - booksFetched;\n    const currentBatchSize = Math.min(remainingBooks, 40);\n\n    try {\n      const response = await fetch(\n        `https://www.googleapis.com/books/v1/volumes?q=subject:${genre}&maxResults=${currentBatchSize}&startIndex=${startIndex}`\n      );\n\n      const data = await response.json();\n\n      if (!data.items || data.items.length === 0) break;\n\n      for (const item of data.items) {\n        const info = item.volumeInfo;\n        if (!info || !info.imageLinks?.thumbnail) continue;\n\n        const forcedGenre = [genre];\n        const cleanedBook = cleanBookData(info, forcedGenre);\n\n        if (!booksByGenre[genre]) {\n          booksByGenre[genre] = [];\n        }\n\n        if (!isDuplicateBook(cleanedBook, genre)) {\n          booksByGenre[genre].push(cleanedBook);\n          booksFetched++;\n        }\n\n        if (booksFetched >= batchSize) break; \n      }\n\n      startIndex += currentBatchSize;\n    } catch (error) {\n      console.error(`Error fetching books for genre \"${genre}\":`, error);\n      break;\n    }\n  }\n  await delay(500);\n  console.log(booksByGenre)\n  \n  return booksByGenre;\n};\n*/\n_c10 = RemoveFromCart;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10;\n$RefreshReg$(_c, \"AddBookToDB\");\n$RefreshReg$(_c2, \"GetBookByGenre\");\n$RefreshReg$(_c3, \"AuthenticateUser\");\n$RefreshReg$(_c4, \"FetchCart\");\n$RefreshReg$(_c5, \"AddToCart\");\n$RefreshReg$(_c6, \"CompleteTransaction\");\n$RefreshReg$(_c7, \"Checkout\");\n$RefreshReg$(_c8, \"ClearCart\");\n$RefreshReg$(_c9, \"UpdateCartQuantity\");\n$RefreshReg$(_c10, \"RemoveFromCart\");","map":{"version":3,"names":["GetBookByID","useUser","booksByGenre","allGenres","genreIDs","id","genre","AddBookToDB","book","fetch","method","headers","body","JSON","stringify","genreID","genreid","title","subtitle","authors","publisher","description","pageCount","categories","rating","maturityRating","image","price","then","response","ok","Error","status","text","data","console","log","catch","error","_c","GetBookByGenre","books","json","forEach","push","_c2","AuthenticateUser","token","name","email","profileImg","user","role","points","dateCreated","created","_c3","FetchCart","userId","_data$cartItems","cartItems","_c4","AddToCart","bookId","updatedCart","_c5","CompleteTransaction","applyPoints","_s","_c6","Checkout","_c7","ClearCart","setUser","prev","cart","_c8","UpdateCartQuantity","quantity","_c9","RemoveFromCart","_c10","$RefreshReg$"],"sources":["/Users/coycrowder/MIS 321/321Project/Coyson/src/Api.js"],"sourcesContent":["import { GetBookByID } from \"./BookData\";\nimport { useUser } from './UserContext';\n\nexport let booksByGenre = {};\n\nexport const allGenres = [\n  \"Fiction\",\n  \"Mystery\",\n  \"Biography\",\n  \"Fantasy\",\n  \"AutoBiography\",\n  \"Nonfiction\",\n  \"Thriller\",\n  \"Science Fiction\",\n  \"Poetry\",\n  \"Novel\"\n];\n\nexport const genreIDs = [\n  { id: 101, genre: \"Fiction\" },\n  { id: 102, genre: \"Mystery\" },\n  { id: 103, genre: \"Biography\" },\n  { id: 104, genre: \"Fantasy\" },\n  { id: 105, genre: \"AutoBiography\" },\n  { id: 106, genre: \"Nonfiction\" },\n  { id: 107, genre: \"Thriller\" },\n  { id: 108, genre: \"Science Fiction\" },\n  { id: 109, genre: \"Poetry\" },\n  { id: 110, genre: \"Novel\" }\n];\n\nexport function AddBookToDB(book){\n  fetch('http://localhost:5000/api/Book', {\n    method: 'POST',\n    headers: {\n      'accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      genreID: book.genreid,\n      title: book.title,\n      subtitle: book.subtitle,\n      authors: book.authors,\n      publisher: book.publisher,\n      description: book.description,\n      pageCount: book.pageCount,\n      categories: book.categories,\n      rating: book.rating,\n      maturityRating: book.maturityRating,\n      image: book.image,\n      price: book.price,\n    })\n  })\n  .then(response => {\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    return response.text();\n  })\n  .then(data => {\n    console.log(\"Success:\", data);\n  })\n  .catch(error => {\n    console.error(\"Error:\", error);\n  });\n}\n\nexport const GetBookByGenre = async (genreID) => {\n  const response = await fetch(`http://localhost:5000/api/book/genre/${genreID}`);\n\n  if (!response.ok) {\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n\n  const books = await response.json();\n\n  if (!booksByGenre[genreID]) {\n    booksByGenre[genreID] = [];\n  }\n\n  books.forEach(book => {\n    booksByGenre[genreID].push(book);\n  });\n};\n\nexport const AuthenticateUser = async ({ token, name, email, profileImg }) => {\n  try {\n    const response = await fetch(\"http://localhost:5000/api/user/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ token, name, email, profileImg })\n    });\n\n    if (!response.ok) {\n      throw new Error(\"User authentication failed.\");\n    }\n\n    const user = await response.json();\n    return {\n      id: user.id,\n      token: user.token,\n      name: user.name,\n      email: user.email,\n      profileImg: user.profileImg,\n      role: user.role,\n      points: user.points,\n      dateCreated: user.created,\n    };\n  } catch (error) {\n    console.error(\"Error authenticating user:\", error);\n    return false;\n  }\n};\n\nexport const FetchCart = async (userId) => {\n  try {\n    const response = await fetch(`http://localhost:5000/api/cart/fetchcart?userId=${userId}`);\n\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch cart\");\n    }\n\n    const data = await response.json();\n    return data.cartItems ?? [];\n  } catch (error) {\n    console.error(\"Cart fetch error:\", error);\n    return [];\n  }\n};\n\n\n\nexport const AddToCart = async (userId, bookId, price) => {\n  try {\n    const response = await fetch(`http://localhost:5000/api/cart/addtocart?userId=${userId}&bookId=${bookId}&price=${price}`, {\n      method: \"POST\"\n    });\n\n    if (!response.ok) throw new Error(\"Add to cart failed.\");\n\n    const updatedCart = await FetchCart(userId); // Pull updated cart\n    return updatedCart;\n  } catch (error) {\n    console.error(\"Error adding to cart:\", error);\n    return null;\n  }\n};\n\n\n\n\n\n// Take the price, if the user applied their points, and add the transaction to the database. Then reset their points if used and reset their active cart.\nexport async function CompleteTransaction(applyPoints){\n  const { user } = useUser();\n\n  user.books.forEach(book => {\n      // Each book purchased\n  })\n\n  if(applyPoints){\n    // If user chose to apply their reward points, each point is 1 cent\n  }\n\n  // Reset books in cart and points\n}\n\n\n\nexport const Checkout = async (userId) => {\n  try {\n    const response = await fetch(`http://localhost:5000/api/cart/checkout?userId=${userId}`, {\n      method: \"POST\"\n    });\n\n    if (!response.ok) throw new Error(\"Checkout failed.\");\n    return true;\n  } catch (error) {\n    console.error(\"Checkout error:\", error);\n    return false;\n  }\n};\n\nexport const ClearCart = (setUser) => {\n  setUser(prev => ({ ...prev, cart: [] }));\n};\n\n\n\n\n\nexport const UpdateCartQuantity = async (userId, bookId, quantity) => {\n  try {\n    const response = await fetch(`http://localhost:5000/api/cart/updatequantity?userId=${userId}&bookId=${bookId}&quantity=${quantity}`, {\n      method: \"PUT\"\n    });\n\n    if (!response.ok) throw new Error(\"Failed to update quantity\");\n    return true;\n  } catch (error) {\n    console.error(\"UpdateCartQuantity error:\", error);\n    return false;\n  }\n};\n\n\n\n\n\nexport const RemoveFromCart = async (userId, bookId) => {\n  try {\n    const response = await fetch(`http://localhost:5000/api/cart/removefromcart?userId=${userId}&bookId=${bookId}`, {\n      method: \"DELETE\"\n    });\n\n    if (!response.ok) throw new Error(\"Failed to remove item\");\n    return true;\n  } catch (error) {\n    console.error(\"RemoveFromCart error:\", error);\n    return false;\n  }\n};\n\n\n\n\n\n\n\n\n/*  All Commented Below is for fetching books from Google API\n\nconst getRandomPrice = () => {\n  const prices = [19.99, 24.99, 29.99, 34.99, 39.99];\n  const randomIndex = Math.floor(Math.random() * prices.length);\n  return prices[randomIndex];\n};\n\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nexport const fetchAllGenres = async () => {\n  for (const genre of allGenres) {\n    await fetchBooksByGenre(genre, 64);\n    await delay(200);\n  }\n  console.log(booksByGenre);\n};\n\nconst cleanBookData = (book, matchedGenres) => {\n  const genreid = genreIDs.find(g => g.genre === matchedGenres[0])?.id ?? null;\n  count++;\n\n  return {\n    genreid: typeof genreid === \"number\" ? genreid : null,\n    title: book?.title ?? \"Unavailable\",\n    subtitle: book?.subtitle ?? null,\n    authors: Array.isArray(book?.authors) \n      ? (book.authors[0] ?? \"Unavailable\") \n      : (book?.authors ?? \"Unavailable\"),\n    publisher: book?.publisher ?? null,\n    description: book?.description ?? null,\n    pageCount: typeof book?.pageCount === \"number\" ? book.pageCount : null,\n    categories: Array.isArray(matchedGenres) \n      ? (matchedGenres[0] ?? null) \n      : (matchedGenres ?? null),\n    rating: typeof book?.averageRating === \"number\" ? book.averageRating : null,\n    maturityRating: book?.maturityRating ?? null,\n    image: book?.imageLinks?.thumbnail ?? null,\n    price: getRandomPrice()\n  }  \n};\n\n\nconst isDuplicateBook = (book, genre) => {\n  return booksByGenre[genre]?.some(existingBook => existingBook.title === book.title) ?? false;\n};\n\n\nexport const fetchBooksByGenre = async (genre, batchSize) => {\n  let booksFetched = 0;\n  let startIndex = 0;\n\n  \n  while (booksFetched < batchSize) {\n    const remainingBooks = batchSize - booksFetched;\n    const currentBatchSize = Math.min(remainingBooks, 40);\n\n    try {\n      const response = await fetch(\n        `https://www.googleapis.com/books/v1/volumes?q=subject:${genre}&maxResults=${currentBatchSize}&startIndex=${startIndex}`\n      );\n\n      const data = await response.json();\n\n      if (!data.items || data.items.length === 0) break;\n\n      for (const item of data.items) {\n        const info = item.volumeInfo;\n        if (!info || !info.imageLinks?.thumbnail) continue;\n\n        const forcedGenre = [genre];\n        const cleanedBook = cleanBookData(info, forcedGenre);\n\n        if (!booksByGenre[genre]) {\n          booksByGenre[genre] = [];\n        }\n\n        if (!isDuplicateBook(cleanedBook, genre)) {\n          booksByGenre[genre].push(cleanedBook);\n          booksFetched++;\n        }\n\n        if (booksFetched >= batchSize) break; \n      }\n\n      startIndex += currentBatchSize;\n    } catch (error) {\n      console.error(`Error fetching books for genre \"${genre}\":`, error);\n      break;\n    }\n  }\n  await delay(500);\n  console.log(booksByGenre)\n  \n  return booksByGenre;\n};\n*/\n\n"],"mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhGA2C,IAAA,GArBaD,cAAc;AAAA,IAAAzC,EAAA,EAAAM,GAAA,EAAAW,GAAA,EAAAK,GAAA,EAAAI,GAAA,EAAAI,GAAA,EAAAE,GAAA,EAAAK,GAAA,EAAAG,GAAA,EAAAE,IAAA;AAAAC,YAAA,CAAA3C,EAAA;AAAA2C,YAAA,CAAArC,GAAA;AAAAqC,YAAA,CAAA1B,GAAA;AAAA0B,YAAA,CAAArB,GAAA;AAAAqB,YAAA,CAAAjB,GAAA;AAAAiB,YAAA,CAAAb,GAAA;AAAAa,YAAA,CAAAX,GAAA;AAAAW,YAAA,CAAAN,GAAA;AAAAM,YAAA,CAAAH,GAAA;AAAAG,YAAA,CAAAD,IAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}