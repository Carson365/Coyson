{"ast":null,"code":"var _jsxFileName = \"/Users/coycrowder/MIS 321/321Project/Coyson/src/AdminAuthenticateContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { onAuthStateChanged } from 'firebase/auth';\nimport { auth } from './AdminFirebase'; // your Firebase config\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminAuthContext = /*#__PURE__*/createContext();\nexport const AdminAuthProvider = ({\n  children\n}) => {\n  _s();\n  const [adminUser, setAdminUser] = useState(null); // start with null\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async user => {\n      if (user) {\n        // Assuming you're storing admin info in Firestore\n        const isAdmin = await checkIfAdmin(user.uid); // check admin status\n        if (isAdmin) {\n          setAdminUser(user); // Only set the admin user if they are an admin\n        } else {\n          setAdminUser(null); // Reset if they are not an admin\n        }\n      } else {\n        setAdminUser(null); // No user logged in, set to null\n      }\n    });\n    return () => unsubscribe();\n  }, []);\n\n  // You can implement a function to check the admin role\n  const checkIfAdmin = async uid => {\n    // Fetch admin data from Firestore or any other DB\n    // Example: check a collection like 'users' where we store admin status\n    const userDoc = await db.collection('users').doc(uid).get();\n    const userData = userDoc.data();\n    return (userData === null || userData === void 0 ? void 0 : userData.role) === 'admin'; // Assuming 'role' is a field in Firestore\n  };\n  return /*#__PURE__*/_jsxDEV(AdminAuthContext.Provider, {\n    value: {\n      adminUser,\n      setAdminUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminAuthProvider, \"LwlrsuempEbAqWaBF810A0M4n/I=\");\n_c = AdminAuthProvider;\nexport const useAdminAuth = () => {\n  _s2();\n  return useContext(AdminAuthContext);\n};\n_s2(useAdminAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AdminAuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","onAuthStateChanged","auth","jsxDEV","_jsxDEV","AdminAuthContext","AdminAuthProvider","children","_s","adminUser","setAdminUser","unsubscribe","user","isAdmin","checkIfAdmin","uid","userDoc","db","collection","doc","get","userData","data","role","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAdminAuth","_s2","$RefreshReg$"],"sources":["/Users/coycrowder/MIS 321/321Project/Coyson/src/AdminAuthenticateContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { onAuthStateChanged } from 'firebase/auth';\nimport { auth } from './AdminFirebase'; // your Firebase config\n\nconst AdminAuthContext = createContext();\n\nexport const AdminAuthProvider = ({ children }) => {\n  const [adminUser, setAdminUser] = useState(null); // start with null\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\n      if (user) {\n        // Assuming you're storing admin info in Firestore\n        const isAdmin = await checkIfAdmin(user.uid); // check admin status\n        if (isAdmin) {\n          setAdminUser(user); // Only set the admin user if they are an admin\n        } else {\n          setAdminUser(null); // Reset if they are not an admin\n        }\n      } else {\n        setAdminUser(null); // No user logged in, set to null\n      }\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  // You can implement a function to check the admin role\n  const checkIfAdmin = async (uid) => {\n    // Fetch admin data from Firestore or any other DB\n    // Example: check a collection like 'users' where we store admin status\n    const userDoc = await db.collection('users').doc(uid).get();\n    const userData = userDoc.data();\n    return userData?.role === 'admin'; // Assuming 'role' is a field in Firestore\n  };\n\n  return (\n    <AdminAuthContext.Provider value={{ adminUser, setAdminUser }}>\n      {children}\n    </AdminAuthContext.Provider>\n  );\n};\n\nexport const useAdminAuth = () => useContext(AdminAuthContext);"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC7E,SAASC,kBAAkB,QAAQ,eAAe;AAClD,SAASC,IAAI,QAAQ,iBAAiB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,gBAAgB,gBAAGR,aAAa,CAAC,CAAC;AAExC,OAAO,MAAMS,iBAAiB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACjD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAElDD,SAAS,CAAC,MAAM;IACd,MAAMY,WAAW,GAAGV,kBAAkB,CAACC,IAAI,EAAE,MAAOU,IAAI,IAAK;MAC3D,IAAIA,IAAI,EAAE;QACR;QACA,MAAMC,OAAO,GAAG,MAAMC,YAAY,CAACF,IAAI,CAACG,GAAG,CAAC,CAAC,CAAC;QAC9C,IAAIF,OAAO,EAAE;UACXH,YAAY,CAACE,IAAI,CAAC,CAAC,CAAC;QACtB,CAAC,MAAM;UACLF,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;QACtB;MACF,CAAC,MAAM;QACLA,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;MACtB;IACF,CAAC,CAAC;IAEF,OAAO,MAAMC,WAAW,CAAC,CAAC;EAC5B,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMG,YAAY,GAAG,MAAOC,GAAG,IAAK;IAClC;IACA;IACA,MAAMC,OAAO,GAAG,MAAMC,EAAE,CAACC,UAAU,CAAC,OAAO,CAAC,CAACC,GAAG,CAACJ,GAAG,CAAC,CAACK,GAAG,CAAC,CAAC;IAC3D,MAAMC,QAAQ,GAAGL,OAAO,CAACM,IAAI,CAAC,CAAC;IAC/B,OAAO,CAAAD,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEE,IAAI,MAAK,OAAO,CAAC,CAAC;EACrC,CAAC;EAED,oBACEnB,OAAA,CAACC,gBAAgB,CAACmB,QAAQ;IAACC,KAAK,EAAE;MAAEhB,SAAS;MAAEC;IAAa,CAAE;IAAAH,QAAA,EAC3DA;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB,CAAC;AAEhC,CAAC;AAACrB,EAAA,CAnCWF,iBAAiB;AAAAwB,EAAA,GAAjBxB,iBAAiB;AAqC9B,OAAO,MAAMyB,YAAY,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMlC,UAAU,CAACO,gBAAgB,CAAC;AAAA;AAAC2B,GAAA,CAAlDD,YAAY;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}