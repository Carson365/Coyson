{"ast":null,"code":"// Add Price\n\nexport let booksByGenre = {};\nexport const allGenres = [\"Fiction\", \"Mystery\", \"Biography\", \"Fantasy\", \"AutoBiography\", \"Nonfiction\", \"Thriller\", \"Science Fiction\", \"Poetry\", \"Novel\"];\nexport const genreIDs = [{\n  id: 101,\n  genre: \"Fiction\"\n}, {\n  id: 102,\n  genre: \"Mystery\"\n}, {\n  id: 103,\n  genre: \"Biography\"\n}, {\n  id: 104,\n  genre: \"Fantasy\"\n}, {\n  id: 105,\n  genre: \"AutoBiography\"\n}, {\n  id: 106,\n  genre: \"Nonfiction\"\n}, {\n  id: 107,\n  genre: \"Thriller\"\n}, {\n  id: 108,\n  genre: \"Science Fiction\"\n}, {\n  id: 109,\n  genre: \"Poetry\"\n}, {\n  id: 110,\n  genre: \"Novel\"\n}];\nconst getRandomPrice = () => {\n  const prices = [19.99, 24.99, 29.99, 34.99, 39.99];\n  const randomIndex = Math.floor(Math.random() * prices.length);\n  return prices[randomIndex];\n};\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\nexport const fetchAllGenres = async () => {\n  for (const genre of allGenres) {\n    await fetchBooksByGenre(genre, 64);\n    await delay(200);\n  }\n  console.log(booksByGenre);\n};\nconst cleanBookData = (book, matchedGenres) => {\n  var _genreIDs$find$id, _genreIDs$find, _book$title, _book$subtitle, _book$publisher, _book$description, _book$pageCount, _book$averageRating, _book$maturityRating, _book$imageLinks$thum, _book$imageLinks;\n  const genreid = (_genreIDs$find$id = (_genreIDs$find = genreIDs.find(g => g.genre === matchedGenres[0])) === null || _genreIDs$find === void 0 ? void 0 : _genreIDs$find.id) !== null && _genreIDs$find$id !== void 0 ? _genreIDs$find$id : null;\n  return {\n    id: crypto.randomUUID(),\n    genreid,\n    title: (_book$title = book === null || book === void 0 ? void 0 : book.title) !== null && _book$title !== void 0 ? _book$title : \"Unavailable\",\n    subtitle: (_book$subtitle = book === null || book === void 0 ? void 0 : book.subtitle) !== null && _book$subtitle !== void 0 ? _book$subtitle : \"Unavailable\",\n    authors: Array.isArray(book === null || book === void 0 ? void 0 : book.authors) ? book.authors : [],\n    publisher: (_book$publisher = book === null || book === void 0 ? void 0 : book.publisher) !== null && _book$publisher !== void 0 ? _book$publisher : \"Unavailable\",\n    description: (_book$description = book === null || book === void 0 ? void 0 : book.description) !== null && _book$description !== void 0 ? _book$description : \"Unavailable\",\n    pageCount: (_book$pageCount = book === null || book === void 0 ? void 0 : book.pageCount) !== null && _book$pageCount !== void 0 ? _book$pageCount : \"Unavailable\",\n    categories: matchedGenres,\n    rating: (_book$averageRating = book === null || book === void 0 ? void 0 : book.averageRating) !== null && _book$averageRating !== void 0 ? _book$averageRating : \"Unavailable\",\n    maturityRating: (_book$maturityRating = book === null || book === void 0 ? void 0 : book.maturityRating) !== null && _book$maturityRating !== void 0 ? _book$maturityRating : \"Unavailable\",\n    image: (_book$imageLinks$thum = book === null || book === void 0 ? void 0 : (_book$imageLinks = book.imageLinks) === null || _book$imageLinks === void 0 ? void 0 : _book$imageLinks.thumbnail) !== null && _book$imageLinks$thum !== void 0 ? _book$imageLinks$thum : null,\n    price: getRandomPrice()\n  };\n};\nconst isDuplicateBook = (book, genre) => {\n  var _booksByGenre$genre$s, _booksByGenre$genre;\n  return (_booksByGenre$genre$s = (_booksByGenre$genre = booksByGenre[genre]) === null || _booksByGenre$genre === void 0 ? void 0 : _booksByGenre$genre.some(existingBook => existingBook.title === book.title)) !== null && _booksByGenre$genre$s !== void 0 ? _booksByGenre$genre$s : false;\n};\nexport const fetchBooksByGenre = async (genre, batchSize) => {\n  let booksFetched = 0;\n  let startIndex = 0;\n  while (booksFetched < batchSize) {\n    const remainingBooks = batchSize - booksFetched;\n    const currentBatchSize = Math.min(remainingBooks, 40);\n    try {\n      const response = await fetch(`https://www.googleapis.com/books/v1/volumes?q=subject:${genre}&maxResults=${currentBatchSize}&startIndex=${startIndex}`);\n      const data = await response.json();\n      if (!data.items || data.items.length === 0) break;\n      for (const item of data.items) {\n        var _info$imageLinks;\n        const info = item.volumeInfo;\n        if (!info || !((_info$imageLinks = info.imageLinks) !== null && _info$imageLinks !== void 0 && _info$imageLinks.thumbnail)) continue;\n        const forcedGenre = [genre];\n        const cleanedBook = cleanBookData(info, forcedGenre);\n        if (!booksByGenre[genre]) {\n          booksByGenre[genre] = [];\n        }\n        if (!isDuplicateBook(cleanedBook, genre)) {\n          booksByGenre[genre].push(cleanedBook);\n          AddBookToDB(cleanedBook);\n          booksFetched++;\n        }\n        if (booksFetched >= batchSize) break;\n      }\n      startIndex += currentBatchSize;\n    } catch (error) {\n      console.error(`Error fetching books for genre \"${genre}\":`, error);\n      break;\n    }\n  }\n  await delay(500);\n  return booksByGenre;\n};\nexport function AddBookToDB(book) {\n  fetch('http://localhost:5000/api/Book', {\n    method: 'POST',\n    headers: {\n      'accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      bookID: book.id,\n      genreID: book.genreid,\n      title: book.title,\n      subtitle: book.subtitle,\n      authors: book.authors,\n      publisher: book.publisher,\n      description: book.description,\n      pageCount: book.pageCount,\n      categories: book.categories,\n      rating: book.rating,\n      maturityRating: book.maturityRating,\n      image: book.image,\n      price: book.price\n    })\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    return response.text();\n  }).then(data => {\n    console.log(\"Success:\", data);\n  }).catch(error => {\n    console.error(\"Error:\", error);\n  });\n}\n_c = AddBookToDB;\nexport const exampleBook = {\n  bookID: 392,\n  genreid: 3,\n  title: \"The Mystery of the Silent River\",\n  subtitle: \"A thrilling adventure in the heart of the unknown\",\n  authors: \"John Doe\",\n  publisher: \"HarperCollins\",\n  description: \"A suspenseful tale of mystery and crime, where every clue leads deeper into the unknown.\",\n  pageCount: 457,\n  categories: \"Mystery\",\n  rating: 4,\n  maturityRating: \"PG-13\",\n  image: \"https://via.placeholder.com/150?text=Book+Cover+392\",\n  price: \"19.99\"\n};\nvar _c;\n$RefreshReg$(_c, \"AddBookToDB\");","map":{"version":3,"names":["booksByGenre","allGenres","genreIDs","id","genre","getRandomPrice","prices","randomIndex","Math","floor","random","length","delay","ms","Promise","resolve","setTimeout","fetchAllGenres","fetchBooksByGenre","console","log","cleanBookData","book","matchedGenres","_genreIDs$find$id","_genreIDs$find","_book$title","_book$subtitle","_book$publisher","_book$description","_book$pageCount","_book$averageRating","_book$maturityRating","_book$imageLinks$thum","_book$imageLinks","genreid","find","g","crypto","randomUUID","title","subtitle","authors","Array","isArray","publisher","description","pageCount","categories","rating","averageRating","maturityRating","image","imageLinks","thumbnail","price","isDuplicateBook","_booksByGenre$genre$s","_booksByGenre$genre","some","existingBook","batchSize","booksFetched","startIndex","remainingBooks","currentBatchSize","min","response","fetch","data","json","items","item","_info$imageLinks","info","volumeInfo","forcedGenre","cleanedBook","push","AddBookToDB","error","method","headers","body","JSON","stringify","bookID","genreID","then","ok","Error","status","text","catch","_c","exampleBook","$RefreshReg$"],"sources":["/Users/coycrowder/MIS 321/321Project/Coyson/src/Api.js"],"sourcesContent":["// Add Price\n\nexport let booksByGenre = {};\n\nexport const allGenres = [\n  \"Fiction\",\n  \"Mystery\",\n  \"Biography\",\n  \"Fantasy\",\n  \"AutoBiography\",\n  \"Nonfiction\",\n  \"Thriller\",\n  \"Science Fiction\",\n  \"Poetry\",\n  \"Novel\"\n];\n\nexport const genreIDs = [\n  { id: 101, genre: \"Fiction\" },\n  { id: 102, genre: \"Mystery\" },\n  { id: 103, genre: \"Biography\" },\n  { id: 104, genre: \"Fantasy\" },\n  { id: 105, genre: \"AutoBiography\" },\n  { id: 106, genre: \"Nonfiction\" },\n  { id: 107, genre: \"Thriller\" },\n  { id: 108, genre: \"Science Fiction\" },\n  { id: 109, genre: \"Poetry\" },\n  { id: 110, genre: \"Novel\" }\n];\n\nconst getRandomPrice = () => {\n  const prices = [19.99, 24.99, 29.99, 34.99, 39.99];\n  const randomIndex = Math.floor(Math.random() * prices.length);\n  return prices[randomIndex];\n};\n\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nexport const fetchAllGenres = async () => {\n  for (const genre of allGenres) {\n    await fetchBooksByGenre(genre, 64);\n    await delay(200);\n  }\n  console.log(booksByGenre);\n};\n\nconst cleanBookData = (book, matchedGenres) => {\n  const genreid = genreIDs.find(g => g.genre === matchedGenres[0])?.id ?? null;\n\n  return {\n    id: crypto.randomUUID(),\n    genreid,\n    title: book?.title ?? \"Unavailable\",\n    subtitle: book?.subtitle ?? \"Unavailable\",\n    authors: Array.isArray(book?.authors) ? book.authors : [],\n    publisher: book?.publisher ?? \"Unavailable\",\n    description: book?.description ?? \"Unavailable\",\n    pageCount: book?.pageCount ?? \"Unavailable\",\n    categories: matchedGenres, \n    rating: book?.averageRating ?? \"Unavailable\",\n    maturityRating: book?.maturityRating ?? \"Unavailable\",\n    image: book?.imageLinks?.thumbnail ?? null,\n    price: getRandomPrice(),\n  };\n};\n\nconst isDuplicateBook = (book, genre) => {\n  return booksByGenre[genre]?.some(existingBook => existingBook.title === book.title) ?? false;\n};\n\nexport const fetchBooksByGenre = async (genre, batchSize) => {\n  let booksFetched = 0;\n  let startIndex = 0;\n\n  while (booksFetched < batchSize) {\n    const remainingBooks = batchSize - booksFetched;\n    const currentBatchSize = Math.min(remainingBooks, 40);\n\n    try {\n      const response = await fetch(\n        `https://www.googleapis.com/books/v1/volumes?q=subject:${genre}&maxResults=${currentBatchSize}&startIndex=${startIndex}`\n      );\n\n      const data = await response.json();\n\n      if (!data.items || data.items.length === 0) break;\n\n      for (const item of data.items) {\n        const info = item.volumeInfo;\n        if (!info || !info.imageLinks?.thumbnail) continue;\n\n        const forcedGenre = [genre];\n        const cleanedBook = cleanBookData(info, forcedGenre);\n\n        if (!booksByGenre[genre]) {\n          booksByGenre[genre] = [];\n        }\n\n        if (!isDuplicateBook(cleanedBook, genre)) {\n          booksByGenre[genre].push(cleanedBook);\n          AddBookToDB(cleanedBook); \n          booksFetched++;\n        }\n\n        if (booksFetched >= batchSize) break; \n      }\n\n      startIndex += currentBatchSize;\n    } catch (error) {\n      console.error(`Error fetching books for genre \"${genre}\":`, error);\n      break;\n    }\n  }\n  await delay(500);\n\n  return booksByGenre;\n};\n\n\nexport function AddBookToDB(book){\n  fetch('http://localhost:5000/api/Book', {\n    method: 'POST',\n    headers: {\n      'accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      bookID: book.id,\n      genreID: book.genreid,\n      title: book.title,\n      subtitle: book.subtitle,\n      authors: book.authors,\n      publisher: book.publisher,\n      description: book.description,\n      pageCount: book.pageCount,\n      categories: book.categories,\n      rating: book.rating,\n      maturityRating: book.maturityRating,\n      image: book.image,\n      price: book.price,\n    })\n  })\n  .then(response => {\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    return response.text();\n  })\n  .then(data => {\n    console.log(\"Success:\", data);\n  })\n  .catch(error => {\n    console.error(\"Error:\", error);\n  });\n}\n\nexport const exampleBook = \n  {\n    bookID: 392,\n    genreid: 3,\n    title: \"The Mystery of the Silent River\",\n    subtitle: \"A thrilling adventure in the heart of the unknown\",\n    authors: \"John Doe\",\n    publisher: \"HarperCollins\",\n    description: \"A suspenseful tale of mystery and crime, where every clue leads deeper into the unknown.\",\n    pageCount: 457,\n    categories: \"Mystery\",\n    rating: 4,\n    maturityRating: \"PG-13\",\n    image: \"https://via.placeholder.com/150?text=Book+Cover+392\",\n    price: \"19.99\"\n  }\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}