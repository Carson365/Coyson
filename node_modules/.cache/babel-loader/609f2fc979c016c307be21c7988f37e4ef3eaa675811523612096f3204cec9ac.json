{"ast":null,"code":"// Global variable to store books by category\nexport let booksByCategory = {};\n\n// Function to clean book data\nconst cleanBookData = (book, category) => {\n  return {\n    title: book.title || \"Unavailable\",\n    subtitle: book.subtitle || \"Unavailable\",\n    authors: book.authors && book.authors.length > 0 ? book.authors.join(\", \") : \"Unavailable\",\n    publisher: book.publisher || \"Unavailable\",\n    description: book.description || \"Unavailable\",\n    pageCount: book.pageCount || \"Unavailable\",\n    categories: category || \"Unavailable\",\n    // Set the category as provided\n    rating: book.averageRating || \"Unavailable\",\n    maturityRating: book.maturityRating || \"Unavailable\",\n    image: book.imageLinks ? book.imageLinks.thumbnail : \"Unavailable\"\n  };\n};\n\n// Fetch fiction books in batches\nexport const fetchFictionBooks = async batchSize => {\n  let booksFetched = 0;\n  let startIndex = 0;\n\n  // Ensure that the category \"Fiction\" exists in the booksByCategory object\n  if (!booksByCategory.Fiction) {\n    booksByCategory.Fiction = [];\n  }\n\n  // Loop to fetch books in batches\n  while (booksFetched < batchSize) {\n    const remainingBooks = batchSize - booksFetched;\n    const currentBatchSize = Math.min(remainingBooks, 40);\n    let response = await fetch(`https://www.googleapis.com/books/v1/volumes?q=fiction&maxResults=${currentBatchSize}&startIndex=${startIndex}`);\n    let data = await response.json();\n    if (!data.items || data.items.length === 0) {\n      break;\n    }\n    data.items.forEach(item => {\n      const bookInfo = item.volumeInfo;\n      const cleanedBook = cleanBookData(bookInfo, \"Fiction\");\n      console.log(cleanedBook);\n      booksByCategory.Fiction.push(cleanedBook);\n      booksFetched++;\n    });\n\n    // Move the startIndex forward for the next batch\n    startIndex += currentBatchSize;\n  }\n\n  // Log the result for debugging\n  console.log(booksByCategory);\n  return booksByCategory;\n};","map":{"version":3,"names":["booksByCategory","cleanBookData","book","category","title","subtitle","authors","length","join","publisher","description","pageCount","categories","rating","averageRating","maturityRating","image","imageLinks","thumbnail","fetchFictionBooks","batchSize","booksFetched","startIndex","Fiction","remainingBooks","currentBatchSize","Math","min","response","fetch","data","json","items","forEach","item","bookInfo","volumeInfo","cleanedBook","console","log","push"],"sources":["/Users/coycrowder/MIS 321/react/my-app/src/api.js"],"sourcesContent":["// Global variable to store books by category\nexport let booksByCategory = {};\n\n// Function to clean book data\nconst cleanBookData = (book, category) => {\n  return {\n    title: book.title || \"Unavailable\",\n    subtitle: book.subtitle || \"Unavailable\",\n    authors: (book.authors && book.authors.length > 0) ? book.authors.join(\", \") : \"Unavailable\",\n    publisher: book.publisher || \"Unavailable\",\n    description: book.description || \"Unavailable\",\n    pageCount: book.pageCount || \"Unavailable\",\n    categories: category || \"Unavailable\", // Set the category as provided\n    rating: book.averageRating || \"Unavailable\",\n    maturityRating: book.maturityRating || \"Unavailable\",\n    image: book.imageLinks ? book.imageLinks.thumbnail : \"Unavailable\",\n  };\n};\n\n// Fetch fiction books in batches\nexport const fetchFictionBooks = async (batchSize) => {\n  let booksFetched = 0;\n  let startIndex = 0;\n\n  // Ensure that the category \"Fiction\" exists in the booksByCategory object\n  if (!booksByCategory.Fiction) {\n    booksByCategory.Fiction = [];\n  }\n\n  // Loop to fetch books in batches\n  while (booksFetched < batchSize) {\n    const remainingBooks = batchSize - booksFetched;\n    const currentBatchSize = Math.min(remainingBooks, 40);\n\n    let response = await fetch(`https://www.googleapis.com/books/v1/volumes?q=fiction&maxResults=${currentBatchSize}&startIndex=${startIndex}`);\n    let data = await response.json();\n\n    if (!data.items || data.items.length === 0) {\n      break;\n    }\n\n    data.items.forEach(item => {\n      const bookInfo = item.volumeInfo;\n      const cleanedBook = cleanBookData(bookInfo, \"Fiction\");\n      console.log(cleanedBook)\n      booksByCategory.Fiction.push(cleanedBook);\n      booksFetched++;\n    });\n\n    // Move the startIndex forward for the next batch\n    startIndex += currentBatchSize;\n  }\n\n  // Log the result for debugging\n  console.log(booksByCategory);\n  return booksByCategory;\n};"],"mappings":"AAAA;AACA,OAAO,IAAIA,eAAe,GAAG,CAAC,CAAC;;AAE/B;AACA,MAAMC,aAAa,GAAGA,CAACC,IAAI,EAAEC,QAAQ,KAAK;EACxC,OAAO;IACLC,KAAK,EAAEF,IAAI,CAACE,KAAK,IAAI,aAAa;IAClCC,QAAQ,EAAEH,IAAI,CAACG,QAAQ,IAAI,aAAa;IACxCC,OAAO,EAAGJ,IAAI,CAACI,OAAO,IAAIJ,IAAI,CAACI,OAAO,CAACC,MAAM,GAAG,CAAC,GAAIL,IAAI,CAACI,OAAO,CAACE,IAAI,CAAC,IAAI,CAAC,GAAG,aAAa;IAC5FC,SAAS,EAAEP,IAAI,CAACO,SAAS,IAAI,aAAa;IAC1CC,WAAW,EAAER,IAAI,CAACQ,WAAW,IAAI,aAAa;IAC9CC,SAAS,EAAET,IAAI,CAACS,SAAS,IAAI,aAAa;IAC1CC,UAAU,EAAET,QAAQ,IAAI,aAAa;IAAE;IACvCU,MAAM,EAAEX,IAAI,CAACY,aAAa,IAAI,aAAa;IAC3CC,cAAc,EAAEb,IAAI,CAACa,cAAc,IAAI,aAAa;IACpDC,KAAK,EAAEd,IAAI,CAACe,UAAU,GAAGf,IAAI,CAACe,UAAU,CAACC,SAAS,GAAG;EACvD,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,SAAS,IAAK;EACpD,IAAIC,YAAY,GAAG,CAAC;EACpB,IAAIC,UAAU,GAAG,CAAC;;EAElB;EACA,IAAI,CAACtB,eAAe,CAACuB,OAAO,EAAE;IAC5BvB,eAAe,CAACuB,OAAO,GAAG,EAAE;EAC9B;;EAEA;EACA,OAAOF,YAAY,GAAGD,SAAS,EAAE;IAC/B,MAAMI,cAAc,GAAGJ,SAAS,GAAGC,YAAY;IAC/C,MAAMI,gBAAgB,GAAGC,IAAI,CAACC,GAAG,CAACH,cAAc,EAAE,EAAE,CAAC;IAErD,IAAII,QAAQ,GAAG,MAAMC,KAAK,CAAC,oEAAoEJ,gBAAgB,eAAeH,UAAU,EAAE,CAAC;IAC3I,IAAIQ,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAEhC,IAAI,CAACD,IAAI,CAACE,KAAK,IAAIF,IAAI,CAACE,KAAK,CAACzB,MAAM,KAAK,CAAC,EAAE;MAC1C;IACF;IAEAuB,IAAI,CAACE,KAAK,CAACC,OAAO,CAACC,IAAI,IAAI;MACzB,MAAMC,QAAQ,GAAGD,IAAI,CAACE,UAAU;MAChC,MAAMC,WAAW,GAAGpC,aAAa,CAACkC,QAAQ,EAAE,SAAS,CAAC;MACtDG,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;MACxBrC,eAAe,CAACuB,OAAO,CAACiB,IAAI,CAACH,WAAW,CAAC;MACzChB,YAAY,EAAE;IAChB,CAAC,CAAC;;IAEF;IACAC,UAAU,IAAIG,gBAAgB;EAChC;;EAEA;EACAa,OAAO,CAACC,GAAG,CAACvC,eAAe,CAAC;EAC5B,OAAOA,eAAe;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}