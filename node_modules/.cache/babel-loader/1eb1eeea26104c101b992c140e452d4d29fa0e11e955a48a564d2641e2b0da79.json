{"ast":null,"code":"var _jsxFileName = \"/Users/coycrowder/MIS 321/321Project/Coyson/src/Components/SearchList.jsx\",\n  _s = $RefreshSig$();\nimport { booksByGenre } from '../Api.js';\nimport Card from './Card.jsx';\nimport React, { useState, useEffect } from 'react';\nimport Fuse from 'fuse.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchList = ({\n  input\n}) => {\n  _s();\n  const [filteredBooks, setFilteredBooks] = useState([]);\n  useEffect(() => {\n    // Flatten all books from different genres\n    const books = flattenBooksByGenre();\n\n    // Fuse.js options for searching title, categories, and authors\n    const options = {\n      keys: ['title', 'categories', 'authors'],\n      threshold: 0.3,\n      // Adjust threshold for search sensitivity\n      includeScore: true // Include scores in the result\n    };\n    const fuse = new Fuse(books, options);\n\n    // Perform the search with the input\n    const result = fuse.search(input);\n\n    // Sort books based on score and map them back to original format\n    const sortedBooks = result.map(({\n      item\n    }) => item) // Get the original book object\n    .sort((a, b) => {\n      // Sort by score: lower score means better match\n      return result.find(r => r.item === a).score - result.find(r => r.item === b).score;\n    });\n\n    // Update the state with sorted books\n    setFilteredBooks(sortedBooks);\n  }, [input]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"book-grid\",\n    children: filteredBooks.map((book, index) => /*#__PURE__*/_jsxDEV(Card, {\n      book: book\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n// Flatten booksByGenre into a single array\n_s(SearchList, \"hvNVZ27hVawvLa0SVIUFTANu+pI=\");\n_c = SearchList;\nconst flattenBooksByGenre = () => {\n  return Object.values(booksByGenre).flat();\n};\nexport default SearchList;\nvar _c;\n$RefreshReg$(_c, \"SearchList\");","map":{"version":3,"names":["booksByGenre","Card","React","useState","useEffect","Fuse","jsxDEV","_jsxDEV","SearchList","input","_s","filteredBooks","setFilteredBooks","books","flattenBooksByGenre","options","keys","threshold","includeScore","fuse","result","search","sortedBooks","map","item","sort","a","b","find","r","score","className","children","book","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","Object","values","flat","$RefreshReg$"],"sources":["/Users/coycrowder/MIS 321/321Project/Coyson/src/Components/SearchList.jsx"],"sourcesContent":["import { booksByGenre } from '../Api.js'\nimport Card from './Card.jsx'\nimport React, { useState, useEffect } from 'react';\nimport Fuse from 'fuse.js';\n\nconst SearchList = ({ input }) => {\n  const [filteredBooks, setFilteredBooks] = useState([]);\n\n  useEffect(() => {\n    // Flatten all books from different genres\n    const books = flattenBooksByGenre();\n\n    // Fuse.js options for searching title, categories, and authors\n    const options = {\n      keys: ['title', 'categories', 'authors'],\n      threshold: 0.3,  // Adjust threshold for search sensitivity\n      includeScore: true,  // Include scores in the result\n    };\n\n    const fuse = new Fuse(books, options);\n\n    // Perform the search with the input\n    const result = fuse.search(input);\n\n    // Sort books based on score and map them back to original format\n    const sortedBooks = result\n      .map(({ item }) => item)  // Get the original book object\n      .sort((a, b) => {\n        // Sort by score: lower score means better match\n        return result.find(r => r.item === a).score - result.find(r => r.item === b).score;\n      });\n\n    // Update the state with sorted books\n    setFilteredBooks(sortedBooks);\n  }, [input]);\n\n  return (\n    <div className=\"book-grid\">\n      {filteredBooks.map((book, index) => (\n        <Card key={index} book={book} />\n      ))}\n    </div>\n  );\n};\n\n// Flatten booksByGenre into a single array\nconst flattenBooksByGenre = () => {\n  return Object.values(booksByGenre).flat();\n};\n\nexport default SearchList;\n"],"mappings":";;AAAA,SAASA,YAAY,QAAQ,WAAW;AACxC,OAAOC,IAAI,MAAM,YAAY;AAC7B,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EAChC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEtDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,KAAK,GAAGC,mBAAmB,CAAC,CAAC;;IAEnC;IACA,MAAMC,OAAO,GAAG;MACdC,IAAI,EAAE,CAAC,OAAO,EAAE,YAAY,EAAE,SAAS,CAAC;MACxCC,SAAS,EAAE,GAAG;MAAG;MACjBC,YAAY,EAAE,IAAI,CAAG;IACvB,CAAC;IAED,MAAMC,IAAI,GAAG,IAAId,IAAI,CAACQ,KAAK,EAAEE,OAAO,CAAC;;IAErC;IACA,MAAMK,MAAM,GAAGD,IAAI,CAACE,MAAM,CAACZ,KAAK,CAAC;;IAEjC;IACA,MAAMa,WAAW,GAAGF,MAAM,CACvBG,GAAG,CAAC,CAAC;MAAEC;IAAK,CAAC,KAAKA,IAAI,CAAC,CAAE;IAAA,CACzBC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MACd;MACA,OAAOP,MAAM,CAACQ,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACL,IAAI,KAAKE,CAAC,CAAC,CAACI,KAAK,GAAGV,MAAM,CAACQ,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACL,IAAI,KAAKG,CAAC,CAAC,CAACG,KAAK;IACpF,CAAC,CAAC;;IAEJ;IACAlB,gBAAgB,CAACU,WAAW,CAAC;EAC/B,CAAC,EAAE,CAACb,KAAK,CAAC,CAAC;EAEX,oBACEF,OAAA;IAAKwB,SAAS,EAAC,WAAW;IAAAC,QAAA,EACvBrB,aAAa,CAACY,GAAG,CAAC,CAACU,IAAI,EAAEC,KAAK,kBAC7B3B,OAAA,CAACN,IAAI;MAAagC,IAAI,EAAEA;IAAK,GAAlBC,KAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CAChC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;;AAED;AAAA5B,EAAA,CAxCMF,UAAU;AAAA+B,EAAA,GAAV/B,UAAU;AAyChB,MAAMM,mBAAmB,GAAGA,CAAA,KAAM;EAChC,OAAO0B,MAAM,CAACC,MAAM,CAACzC,YAAY,CAAC,CAAC0C,IAAI,CAAC,CAAC;AAC3C,CAAC;AAED,eAAelC,UAAU;AAAC,IAAA+B,EAAA;AAAAI,YAAA,CAAAJ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}