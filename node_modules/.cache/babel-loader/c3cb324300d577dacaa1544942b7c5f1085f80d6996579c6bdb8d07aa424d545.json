{"ast":null,"code":"import { GetBookByID } from \"./BookData\";\n\n// Add Price\nlet count = 0;\nexport let booksByGenre = {};\nexport const allGenres = [\"Fiction\", \"Mystery\", \"Biography\", \"Fantasy\", \"AutoBiography\", \"Nonfiction\", \"Thriller\", \"Science Fiction\", \"Poetry\", \"Novel\"];\nexport const genreIDs = [{\n  id: 101,\n  genre: \"Fiction\"\n}, {\n  id: 102,\n  genre: \"Mystery\"\n}, {\n  id: 103,\n  genre: \"Biography\"\n}, {\n  id: 104,\n  genre: \"Fantasy\"\n}, {\n  id: 105,\n  genre: \"AutoBiography\"\n}, {\n  id: 106,\n  genre: \"Nonfiction\"\n}, {\n  id: 107,\n  genre: \"Thriller\"\n}, {\n  id: 108,\n  genre: \"Science Fiction\"\n}, {\n  id: 109,\n  genre: \"Poetry\"\n}, {\n  id: 110,\n  genre: \"Novel\"\n}];\nconst getRandomPrice = () => {\n  const prices = [19.99, 24.99, 29.99, 34.99, 39.99];\n  const randomIndex = Math.floor(Math.random() * prices.length);\n  return prices[randomIndex];\n};\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\nexport const fetchAllGenres = async () => {\n  for (const genre of allGenres) {\n    await fetchBooksByGenre(genre, 64);\n    await delay(200);\n  }\n  console.log(booksByGenre);\n};\nconst cleanBookData = (book, matchedGenres) => {\n  var _genreIDs$find$id, _genreIDs$find, _book$title, _book$subtitle, _book$authors$, _book$authors, _book$publisher, _book$description, _matchedGenres$, _book$maturityRating, _book$imageLinks$thum, _book$imageLinks;\n  const genreid = (_genreIDs$find$id = (_genreIDs$find = genreIDs.find(g => g.genre === matchedGenres[0])) === null || _genreIDs$find === void 0 ? void 0 : _genreIDs$find.id) !== null && _genreIDs$find$id !== void 0 ? _genreIDs$find$id : null;\n  count++;\n  return {\n    genreid: typeof genreid === \"number\" ? genreid : null,\n    title: (_book$title = book === null || book === void 0 ? void 0 : book.title) !== null && _book$title !== void 0 ? _book$title : \"Unavailable\",\n    subtitle: (_book$subtitle = book === null || book === void 0 ? void 0 : book.subtitle) !== null && _book$subtitle !== void 0 ? _book$subtitle : null,\n    authors: Array.isArray(book === null || book === void 0 ? void 0 : book.authors) ? (_book$authors$ = book.authors[0]) !== null && _book$authors$ !== void 0 ? _book$authors$ : \"Unavailable\" : (_book$authors = book === null || book === void 0 ? void 0 : book.authors) !== null && _book$authors !== void 0 ? _book$authors : \"Unavailable\",\n    publisher: (_book$publisher = book === null || book === void 0 ? void 0 : book.publisher) !== null && _book$publisher !== void 0 ? _book$publisher : null,\n    description: (_book$description = book === null || book === void 0 ? void 0 : book.description) !== null && _book$description !== void 0 ? _book$description : null,\n    pageCount: typeof (book === null || book === void 0 ? void 0 : book.pageCount) === \"number\" ? book.pageCount : null,\n    categories: Array.isArray(matchedGenres) ? (_matchedGenres$ = matchedGenres[0]) !== null && _matchedGenres$ !== void 0 ? _matchedGenres$ : null : matchedGenres !== null && matchedGenres !== void 0 ? matchedGenres : null,\n    rating: typeof (book === null || book === void 0 ? void 0 : book.averageRating) === \"number\" ? book.averageRating : null,\n    maturityRating: (_book$maturityRating = book === null || book === void 0 ? void 0 : book.maturityRating) !== null && _book$maturityRating !== void 0 ? _book$maturityRating : null,\n    image: (_book$imageLinks$thum = book === null || book === void 0 ? void 0 : (_book$imageLinks = book.imageLinks) === null || _book$imageLinks === void 0 ? void 0 : _book$imageLinks.thumbnail) !== null && _book$imageLinks$thum !== void 0 ? _book$imageLinks$thum : null,\n    price: getRandomPrice()\n  };\n};\nconst isDuplicateBook = (book, genre) => {\n  var _booksByGenre$genre$s, _booksByGenre$genre;\n  return (_booksByGenre$genre$s = (_booksByGenre$genre = booksByGenre[genre]) === null || _booksByGenre$genre === void 0 ? void 0 : _booksByGenre$genre.some(existingBook => existingBook.title === book.title)) !== null && _booksByGenre$genre$s !== void 0 ? _booksByGenre$genre$s : false;\n};\nexport const fetchBooksByGenre = async (genre, batchSize) => {\n  let booksFetched = 0;\n  let startIndex = 0;\n  GetBooksById();\n\n  /*\n  while (booksFetched < batchSize) {\n    const remainingBooks = batchSize - booksFetched;\n    const currentBatchSize = Math.min(remainingBooks, 40);\n     try {\n      const response = await fetch(\n        `https://www.googleapis.com/books/v1/volumes?q=subject:${genre}&maxResults=${currentBatchSize}&startIndex=${startIndex}`\n      );\n       const data = await response.json();\n       if (!data.items || data.items.length === 0) break;\n       for (const item of data.items) {\n        const info = item.volumeInfo;\n        if (!info || !info.imageLinks?.thumbnail) continue;\n         const forcedGenre = [genre];\n        const cleanedBook = cleanBookData(info, forcedGenre);\n         if (!booksByGenre[genre]) {\n          booksByGenre[genre] = [];\n        }\n         if (!isDuplicateBook(cleanedBook, genre)) {\n          booksByGenre[genre].push(cleanedBook);\n          booksFetched++;\n        }\n         if (booksFetched >= batchSize) break; \n      }\n       startIndex += currentBatchSize;\n    } catch (error) {\n      console.error(`Error fetching books for genre \"${genre}\":`, error);\n      break;\n    }\n  }\n  await delay(500);\n  console.log(booksByGenre)\n  */\n  return booksByGenre;\n};\nexport function AddBookToDB(book) {\n  fetch('http://localhost:5000/api/Book', {\n    method: 'POST',\n    headers: {\n      'accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      genreID: book.genreid,\n      title: book.title,\n      subtitle: book.subtitle,\n      authors: book.authors,\n      publisher: book.publisher,\n      description: book.description,\n      pageCount: book.pageCount,\n      categories: book.categories,\n      rating: book.rating,\n      maturityRating: book.maturityRating,\n      image: book.image,\n      price: book.price\n    })\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    return response.text();\n  }).then(data => {\n    console.log(\"Success:\", data);\n  }).catch(error => {\n    console.error(\"Error:\", error);\n  });\n}\n_c = AddBookToDB;\nconst GetBooksById = async () => {\n  try {\n    const response = await fetch(`http://localhost:5000/api/book/261`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const book = await response.json();\n    const genre = \"Fiction\";\n    if (!Array.isArray(booksByGenre[genre])) {\n      booksByGenre[genre] = []; // Initialize the genre array if it doesn't exist\n    }\n    booksByGenre[genre].push(book);\n    console.log(booksByGenre);\n  } catch (error) {\n    console.error(\"Failed to fetch book by ID:\", error);\n    return null;\n  }\n};\n_c2 = GetBooksById;\nvar _c, _c2;\n$RefreshReg$(_c, \"AddBookToDB\");\n$RefreshReg$(_c2, \"GetBooksById\");","map":{"version":3,"names":["GetBookByID","count","booksByGenre","allGenres","genreIDs","id","genre","getRandomPrice","prices","randomIndex","Math","floor","random","length","delay","ms","Promise","resolve","setTimeout","fetchAllGenres","fetchBooksByGenre","console","log","cleanBookData","book","matchedGenres","_genreIDs$find$id","_genreIDs$find","_book$title","_book$subtitle","_book$authors$","_book$authors","_book$publisher","_book$description","_matchedGenres$","_book$maturityRating","_book$imageLinks$thum","_book$imageLinks","genreid","find","g","title","subtitle","authors","Array","isArray","publisher","description","pageCount","categories","rating","averageRating","maturityRating","image","imageLinks","thumbnail","price","isDuplicateBook","_booksByGenre$genre$s","_booksByGenre$genre","some","existingBook","batchSize","booksFetched","startIndex","GetBooksById","AddBookToDB","fetch","method","headers","body","JSON","stringify","genreID","then","response","ok","Error","status","text","data","catch","error","_c","json","push","_c2","$RefreshReg$"],"sources":["/Users/coycrowder/MIS 321/321Project/Coyson/src/Api.js"],"sourcesContent":["import { GetBookByID } from \"./BookData\";\n\n// Add Price\nlet count = 0;\n\nexport let booksByGenre = {};\n\nexport const allGenres = [\n  \"Fiction\",\n  \"Mystery\",\n  \"Biography\",\n  \"Fantasy\",\n  \"AutoBiography\",\n  \"Nonfiction\",\n  \"Thriller\",\n  \"Science Fiction\",\n  \"Poetry\",\n  \"Novel\"\n];\n\nexport const genreIDs = [\n  { id: 101, genre: \"Fiction\" },\n  { id: 102, genre: \"Mystery\" },\n  { id: 103, genre: \"Biography\" },\n  { id: 104, genre: \"Fantasy\" },\n  { id: 105, genre: \"AutoBiography\" },\n  { id: 106, genre: \"Nonfiction\" },\n  { id: 107, genre: \"Thriller\" },\n  { id: 108, genre: \"Science Fiction\" },\n  { id: 109, genre: \"Poetry\" },\n  { id: 110, genre: \"Novel\" }\n];\n\nconst getRandomPrice = () => {\n  const prices = [19.99, 24.99, 29.99, 34.99, 39.99];\n  const randomIndex = Math.floor(Math.random() * prices.length);\n  return prices[randomIndex];\n};\n\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nexport const fetchAllGenres = async () => {\n  for (const genre of allGenres) {\n    await fetchBooksByGenre(genre, 64);\n    await delay(200);\n  }\n  console.log(booksByGenre);\n};\n\nconst cleanBookData = (book, matchedGenres) => {\n  const genreid = genreIDs.find(g => g.genre === matchedGenres[0])?.id ?? null;\n  count++;\n\n  return {\n    genreid: typeof genreid === \"number\" ? genreid : null,\n    title: book?.title ?? \"Unavailable\",\n    subtitle: book?.subtitle ?? null,\n    authors: Array.isArray(book?.authors) \n      ? (book.authors[0] ?? \"Unavailable\") \n      : (book?.authors ?? \"Unavailable\"),\n    publisher: book?.publisher ?? null,\n    description: book?.description ?? null,\n    pageCount: typeof book?.pageCount === \"number\" ? book.pageCount : null,\n    categories: Array.isArray(matchedGenres) \n      ? (matchedGenres[0] ?? null) \n      : (matchedGenres ?? null),\n    rating: typeof book?.averageRating === \"number\" ? book.averageRating : null,\n    maturityRating: book?.maturityRating ?? null,\n    image: book?.imageLinks?.thumbnail ?? null,\n    price: getRandomPrice()\n  }  \n};\n\n\nconst isDuplicateBook = (book, genre) => {\n  return booksByGenre[genre]?.some(existingBook => existingBook.title === book.title) ?? false;\n};\n\nexport const fetchBooksByGenre = async (genre, batchSize) => {\n  let booksFetched = 0;\n  let startIndex = 0;\n\n  GetBooksById();\n\n  /*\n  while (booksFetched < batchSize) {\n    const remainingBooks = batchSize - booksFetched;\n    const currentBatchSize = Math.min(remainingBooks, 40);\n\n    try {\n      const response = await fetch(\n        `https://www.googleapis.com/books/v1/volumes?q=subject:${genre}&maxResults=${currentBatchSize}&startIndex=${startIndex}`\n      );\n\n      const data = await response.json();\n\n      if (!data.items || data.items.length === 0) break;\n\n      for (const item of data.items) {\n        const info = item.volumeInfo;\n        if (!info || !info.imageLinks?.thumbnail) continue;\n\n        const forcedGenre = [genre];\n        const cleanedBook = cleanBookData(info, forcedGenre);\n\n        if (!booksByGenre[genre]) {\n          booksByGenre[genre] = [];\n        }\n\n        if (!isDuplicateBook(cleanedBook, genre)) {\n          booksByGenre[genre].push(cleanedBook);\n          booksFetched++;\n        }\n\n        if (booksFetched >= batchSize) break; \n      }\n\n      startIndex += currentBatchSize;\n    } catch (error) {\n      console.error(`Error fetching books for genre \"${genre}\":`, error);\n      break;\n    }\n  }\n  await delay(500);\n  console.log(booksByGenre)\n  */\n  return booksByGenre;\n};\n\n\nexport function AddBookToDB(book){\n  fetch('http://localhost:5000/api/Book', {\n    method: 'POST',\n    headers: {\n      'accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      genreID: book.genreid,\n      title: book.title,\n      subtitle: book.subtitle,\n      authors: book.authors,\n      publisher: book.publisher,\n      description: book.description,\n      pageCount: book.pageCount,\n      categories: book.categories,\n      rating: book.rating,\n      maturityRating: book.maturityRating,\n      image: book.image,\n      price: book.price,\n    })\n  })\n  .then(response => {\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    return response.text();\n  })\n  .then(data => {\n    console.log(\"Success:\", data);\n  })\n  .catch(error => {\n    console.error(\"Error:\", error);\n  });\n}\n\nconst GetBooksById = async () => {\n  try {\n    const response = await fetch(`http://localhost:5000/api/book/261`);\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const book = await response.json();\n    \n    const genre = \"Fiction\";\n    if (!Array.isArray(booksByGenre[genre])) {\n      booksByGenre[genre] = [];  // Initialize the genre array if it doesn't exist\n    }\n\n    booksByGenre[genre].push(book);\n    console.log(booksByGenre)\n  } catch (error) {\n    console.error(\"Failed to fetch book by ID:\", error);\n    return null;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}