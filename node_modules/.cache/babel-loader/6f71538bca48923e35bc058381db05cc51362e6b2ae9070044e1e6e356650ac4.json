{"ast":null,"code":"export let booksByCategory = {};\nexport const fetchFictionBooks = async batchSize => {\n  try {\n    const response = await fetch(`https://www.googleapis.com/books/v1/volumes?q=fiction&maxResults=${batchSize}`);\n    const myJson = await response.json();\n\n    // Loop through each book in the response\n    myJson.items.forEach(book => {\n      var _book$volumeInfo$imag;\n      const bookInfo = {\n        title: book.volumeInfo.title,\n        subtitle: book.volumeInfo.subtitle,\n        authors: book.volumeInfo.authors || [],\n        // Ensure authors is an array\n        publisher: book.volumeInfo.publisher,\n        description: book.volumeInfo.description,\n        pageCount: book.volumeInfo.pageCount,\n        categories: book.volumeInfo.categories || [],\n        // Ensure categories is an array\n        rating: book.volumeInfo.averageRating,\n        maturityRating: book.volumeInfo.maturityRating,\n        image: ((_book$volumeInfo$imag = book.volumeInfo.imageLinks) === null || _book$volumeInfo$imag === void 0 ? void 0 : _book$volumeInfo$imag.thumbnail) || '' // Use optional chaining for image\n      };\n\n      // Hard-code the category as \"Fiction\"\n      const category = 'Fiction';\n\n      // If the category doesn't exist in the dictionary, initialize it as an empty array\n      if (!booksByCategory[category]) {\n        booksByCategory[category] = [];\n      }\n\n      // Push the book info into the \"Fiction\" category\n      booksByCategory[category].push(bookInfo);\n    });\n\n    // Optionally, log or return the booksByCategory dictionary\n    console.log(booksByCategory);\n  } catch (error) {\n    console.error(\"Error fetching fiction books:\", error);\n  }\n};","map":{"version":3,"names":["booksByCategory","fetchFictionBooks","batchSize","response","fetch","myJson","json","items","forEach","book","_book$volumeInfo$imag","bookInfo","title","volumeInfo","subtitle","authors","publisher","description","pageCount","categories","rating","averageRating","maturityRating","image","imageLinks","thumbnail","category","push","console","log","error"],"sources":["/Users/coycrowder/MIS 321/react/my-app/src/api.js"],"sourcesContent":["export let booksByCategory = {};\n\nexport const fetchFictionBooks = async (batchSize) => {\n  try {\n    const response = await fetch(`https://www.googleapis.com/books/v1/volumes?q=fiction&maxResults=${batchSize}`);\n    const myJson = await response.json();\n\n    // Loop through each book in the response\n    myJson.items.forEach(book => {\n      const bookInfo = {\n        title: book.volumeInfo.title,\n        subtitle: book.volumeInfo.subtitle,\n        authors: book.volumeInfo.authors || [], // Ensure authors is an array\n        publisher: book.volumeInfo.publisher,\n        description: book.volumeInfo.description,\n        pageCount: book.volumeInfo.pageCount,\n        categories: book.volumeInfo.categories || [], // Ensure categories is an array\n        rating: book.volumeInfo.averageRating,\n        maturityRating: book.volumeInfo.maturityRating,\n        image: book.volumeInfo.imageLinks?.thumbnail || '', // Use optional chaining for image\n      };\n\n      // Hard-code the category as \"Fiction\"\n      const category = 'Fiction';\n\n      // If the category doesn't exist in the dictionary, initialize it as an empty array\n      if (!booksByCategory[category]) {\n        booksByCategory[category] = [];\n      }\n\n      // Push the book info into the \"Fiction\" category\n      booksByCategory[category].push(bookInfo);\n    });\n\n    // Optionally, log or return the booksByCategory dictionary\n    console.log(booksByCategory);\n  } catch (error) {\n    console.error(\"Error fetching fiction books:\", error);\n  }\n};\n"],"mappings":"AAAA,OAAO,IAAIA,eAAe,GAAG,CAAC,CAAC;AAE/B,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,SAAS,IAAK;EACpD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oEAAoEF,SAAS,EAAE,CAAC;IAC7G,MAAMG,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;IAEpC;IACAD,MAAM,CAACE,KAAK,CAACC,OAAO,CAACC,IAAI,IAAI;MAAA,IAAAC,qBAAA;MAC3B,MAAMC,QAAQ,GAAG;QACfC,KAAK,EAAEH,IAAI,CAACI,UAAU,CAACD,KAAK;QAC5BE,QAAQ,EAAEL,IAAI,CAACI,UAAU,CAACC,QAAQ;QAClCC,OAAO,EAAEN,IAAI,CAACI,UAAU,CAACE,OAAO,IAAI,EAAE;QAAE;QACxCC,SAAS,EAAEP,IAAI,CAACI,UAAU,CAACG,SAAS;QACpCC,WAAW,EAAER,IAAI,CAACI,UAAU,CAACI,WAAW;QACxCC,SAAS,EAAET,IAAI,CAACI,UAAU,CAACK,SAAS;QACpCC,UAAU,EAAEV,IAAI,CAACI,UAAU,CAACM,UAAU,IAAI,EAAE;QAAE;QAC9CC,MAAM,EAAEX,IAAI,CAACI,UAAU,CAACQ,aAAa;QACrCC,cAAc,EAAEb,IAAI,CAACI,UAAU,CAACS,cAAc;QAC9CC,KAAK,EAAE,EAAAb,qBAAA,GAAAD,IAAI,CAACI,UAAU,CAACW,UAAU,cAAAd,qBAAA,uBAA1BA,qBAAA,CAA4Be,SAAS,KAAI,EAAE,CAAE;MACtD,CAAC;;MAED;MACA,MAAMC,QAAQ,GAAG,SAAS;;MAE1B;MACA,IAAI,CAAC1B,eAAe,CAAC0B,QAAQ,CAAC,EAAE;QAC9B1B,eAAe,CAAC0B,QAAQ,CAAC,GAAG,EAAE;MAChC;;MAEA;MACA1B,eAAe,CAAC0B,QAAQ,CAAC,CAACC,IAAI,CAAChB,QAAQ,CAAC;IAC1C,CAAC,CAAC;;IAEF;IACAiB,OAAO,CAACC,GAAG,CAAC7B,eAAe,CAAC;EAC9B,CAAC,CAAC,OAAO8B,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;EACvD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}