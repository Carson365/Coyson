{"ast":null,"code":"export let booksByGenre = {};\nconst allGenres = [\"Fiction\", \"Mystery\", \"Biography\", \"Fantasy\", \"AutoBiography\", \"Nonfiction\", \"Thriller\", \"Science Fiction\", \"Poetry\", \"Novel\"];\nexport const fetchAllGenres = async () => {\n  await Promise.all(allGenres.map(genre => fetchBooksByGenre(genre, 64)));\n};\nconst generateRandomPrice = () => {\n  const basePrices = [19.99, 24.99, 29.99, 34.99, 39.99];\n  const randomIndex = Math.floor(Math.random() * basePrices.length);\n  return basePrices[randomIndex];\n};\nconst cleanBookData = (book, category) => {\n  var _book$imageLinks;\n  return {\n    title: (book === null || book === void 0 ? void 0 : book.title) || \"Unavailable\",\n    subtitle: (book === null || book === void 0 ? void 0 : book.subtitle) || \"Unavailable\",\n    authors: Array.isArray(book === null || book === void 0 ? void 0 : book.authors) ? book.authors : [],\n    publisher: (book === null || book === void 0 ? void 0 : book.publisher) || \"Unavailable\",\n    description: (book === null || book === void 0 ? void 0 : book.description) || \"Unavailable\",\n    pageCount: (book === null || book === void 0 ? void 0 : book.pageCount) || \"Unavailable\",\n    categories: category || \"Unavailable\",\n    rating: (book === null || book === void 0 ? void 0 : book.averageRating) || \"Unavailable\",\n    maturityRating: (book === null || book === void 0 ? void 0 : book.maturityRating) || \"Unavailable\",\n    image: (book === null || book === void 0 ? void 0 : (_book$imageLinks = book.imageLinks) === null || _book$imageLinks === void 0 ? void 0 : _book$imageLinks.thumbnail) || null,\n    price: generateRandomPrice()\n  };\n};\nconst isDuplicateBook = (book, genre) => {\n  return booksByGenre[genre].some(existingBook => existingBook.title === book.title);\n};\nexport const fetchBooksByGenre = async (genre, batchSize) => {\n  let booksFetched = 0;\n  let startIndex = 0;\n  if (!booksByGenre[genre]) {\n    booksByGenre[genre] = [];\n  }\n  while (booksFetched < batchSize) {\n    const remainingBooks = batchSize - booksFetched;\n    const currentBatchSize = Math.min(remainingBooks, 40);\n    try {\n      const response = await fetch(`https://www.googleapis.com/books/v1/volumes?q=subject:${genre}&maxResults=${currentBatchSize}&startIndex=${startIndex}`);\n      const data = await response.json();\n      if (!data.items || data.items.length === 0) break;\n      data.items.forEach(item => {\n        if (!item.volumeInfo) return;\n        const cleanedBook = cleanBookData(item.volumeInfo, genre);\n        if (!isDuplicateBook(cleanedBook, genre) && cleanedBook.image) {\n          booksByGenre[genre].push(cleanedBook);\n          booksFetched++;\n        }\n      });\n      startIndex += currentBatchSize;\n    } catch (error) {\n      console.error(`Error fetching books for genre \"${genre}\":`, error);\n      break;\n    }\n  }\n  console.log(booksByGenre);\n  return booksByGenre;\n};","map":{"version":3,"names":["booksByGenre","allGenres","fetchAllGenres","Promise","all","map","genre","fetchBooksByGenre","generateRandomPrice","basePrices","randomIndex","Math","floor","random","length","cleanBookData","book","category","_book$imageLinks","title","subtitle","authors","Array","isArray","publisher","description","pageCount","categories","rating","averageRating","maturityRating","image","imageLinks","thumbnail","price","isDuplicateBook","some","existingBook","batchSize","booksFetched","startIndex","remainingBooks","currentBatchSize","min","response","fetch","data","json","items","forEach","item","volumeInfo","cleanedBook","push","error","console","log"],"sources":["/Users/coycrowder/MIS 321/321Project/Coyson/src/Api.js"],"sourcesContent":["export let booksByGenre = {};\n\nconst allGenres = [\n  \"Fiction\",\n  \"Mystery\",\n  \"Biography\",\n  \"Fantasy\",\n  \"AutoBiography\",\n  \"Nonfiction\",\n  \"Thriller\",\n  \"Science Fiction\",\n  \"Poetry\",\n  \"Novel\"\n];\n\nexport const fetchAllGenres = async () => {\n    await Promise.all(allGenres.map(genre => fetchBooksByGenre(genre, 64)));\n};\n\nconst generateRandomPrice = () => {\n  const basePrices = [19.99, 24.99, 29.99, 34.99, 39.99];\n  const randomIndex = Math.floor(Math.random() * basePrices.length);\n  return basePrices[randomIndex];\n};\n\nconst cleanBookData = (book, category) => {\n  return {\n    title: book?.title || \"Unavailable\",\n    subtitle: book?.subtitle || \"Unavailable\",\n    authors: Array.isArray(book?.authors) ? book.authors : [],\n    publisher: book?.publisher || \"Unavailable\",\n    description: book?.description || \"Unavailable\",\n    pageCount: book?.pageCount || \"Unavailable\",\n    categories: category || \"Unavailable\", \n    rating: book?.averageRating || \"Unavailable\",\n    maturityRating: book?.maturityRating || \"Unavailable\",\n    image: book?.imageLinks?.thumbnail || null,\n    price: generateRandomPrice(),\n  };\n};\n\nconst isDuplicateBook = (book, genre) => {\n  return booksByGenre[genre].some(existingBook => existingBook.title === book.title);\n};\n\nexport const fetchBooksByGenre = async (genre, batchSize) => {\n  let booksFetched = 0;\n  let startIndex = 0;\n\n  if (!booksByGenre[genre]) {\n    booksByGenre[genre] = [];\n  }\n\n  while (booksFetched < batchSize) {\n    const remainingBooks = batchSize - booksFetched;\n    const currentBatchSize = Math.min(remainingBooks, 40);\n\n    try {\n      const response = await fetch(\n        `https://www.googleapis.com/books/v1/volumes?q=subject:${genre}&maxResults=${currentBatchSize}&startIndex=${startIndex}`\n      );\n\n      const data = await response.json();\n\n      if (!data.items || data.items.length === 0) break;\n\n      data.items.forEach(item => {\n        if (!item.volumeInfo) return;\n\n        const cleanedBook = cleanBookData(item.volumeInfo, genre);\n\n        if (!isDuplicateBook(cleanedBook, genre) && cleanedBook.image) {\n          booksByGenre[genre].push(cleanedBook);\n          booksFetched++;\n        }\n      });\n\n      startIndex += currentBatchSize;\n    } catch (error) {\n      console.error(`Error fetching books for genre \"${genre}\":`, error);\n      break;\n    }\n  }\n\n  console.log(booksByGenre)\n  return booksByGenre;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}