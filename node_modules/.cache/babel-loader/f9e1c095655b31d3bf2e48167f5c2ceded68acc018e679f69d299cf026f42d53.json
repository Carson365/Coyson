{"ast":null,"code":"export let booksByCategory = {};\n\n// Function to clean book data\nconst cleanBookData = book => {\n  return {\n    title: book.title || \"Unavailable\",\n    subtitle: book.subtitle || \"Unavailable\",\n    authors: book.authors && book.authors.length > 0 ? book.authors.join(\", \") : \"Unavailable\",\n    publisher: book.publisher || \"Unavailable\",\n    description: book.description || \"Unavailable\",\n    pageCount: book.pageCount || \"Unavailable\",\n    categories: book.categories && book.categories.length > 0 ? book.categories.join(\", \") : \"Unavailable\",\n    rating: book.averageRating || \"Unavailable\",\n    maturityRating: book.maturityRating || \"Unavailable\",\n    image: book.imageLinks ? book.imageLinks.thumbnail : \"Unavailable\"\n  };\n};\n\n// Function to fetch fiction books and organize them into categories\nexport const fetchFictionBooks = async batchSize => {\n  let booksFetched = 0;\n  let startIndex = 0;\n  let booksByCategory = {\n    Fiction: []\n  };\n\n  // Keep fetching books until the batch size is met\n  while (booksFetched < batchSize) {\n    const remainingBooks = batchSize - booksFetched;\n    const currentBatchSize = Math.min(remainingBooks, 40); // Ensure no more than 40 per request\n\n    let response = await fetch(`https://www.googleapis.com/books/v1/volumes?q=fiction&maxResults=${currentBatchSize}&startIndex=${startIndex}`);\n    let data = await response.json();\n\n    // Process each book from the response\n    data.items.forEach(item => {\n      const bookInfo = item.volumeInfo;\n      const cleanedBook = cleanBookData(bookInfo); // Clean data before adding\n      booksByCategory.Fiction.push(cleanedBook); // Add cleaned book to Fiction category\n      booksFetched++;\n    });\n\n    // Update startIndex for the next batch\n    startIndex += 40;\n\n    // Stop if there are no more books in the response\n    if (!data.items || data.items.length === 0) {\n      break;\n    }\n  }\n\n  // Log the booksByCategory to see the results\n  console.log(booksByCategory); // You can check the structure in the console.\n  return booksByCategory; // Return the books organized by category\n};","map":{"version":3,"names":["booksByCategory","cleanBookData","book","title","subtitle","authors","length","join","publisher","description","pageCount","categories","rating","averageRating","maturityRating","image","imageLinks","thumbnail","fetchFictionBooks","batchSize","booksFetched","startIndex","Fiction","remainingBooks","currentBatchSize","Math","min","response","fetch","data","json","items","forEach","item","bookInfo","volumeInfo","cleanedBook","push","console","log"],"sources":["/Users/coycrowder/MIS 321/react/my-app/src/api.js"],"sourcesContent":["export let booksByCategory = {};\n\n// Function to clean book data\nconst cleanBookData = (book) => {\n  return {\n    title: book.title || \"Unavailable\",\n    subtitle: book.subtitle || \"Unavailable\",\n    authors: (book.authors && book.authors.length > 0) ? book.authors.join(\", \") : \"Unavailable\",\n    publisher: book.publisher || \"Unavailable\",\n    description: book.description || \"Unavailable\",\n    pageCount: book.pageCount || \"Unavailable\",\n    categories: book.categories && book.categories.length > 0 ? book.categories.join(\", \") : \"Unavailable\",\n    rating: book.averageRating || \"Unavailable\",\n    maturityRating: book.maturityRating || \"Unavailable\",\n    image: book.imageLinks ? book.imageLinks.thumbnail : \"Unavailable\",\n  };\n};\n\n// Function to fetch fiction books and organize them into categories\nexport const fetchFictionBooks = async (batchSize) => {\n  let booksFetched = 0;\n  let startIndex = 0;\n  let booksByCategory = {\n    Fiction: [],\n  };\n\n  // Keep fetching books until the batch size is met\n  while (booksFetched < batchSize) {\n    const remainingBooks = batchSize - booksFetched;\n    const currentBatchSize = Math.min(remainingBooks, 40); // Ensure no more than 40 per request\n\n    let response = await fetch(`https://www.googleapis.com/books/v1/volumes?q=fiction&maxResults=${currentBatchSize}&startIndex=${startIndex}`);\n    let data = await response.json();\n\n    // Process each book from the response\n    data.items.forEach(item => {\n      const bookInfo = item.volumeInfo;\n      const cleanedBook = cleanBookData(bookInfo); // Clean data before adding\n      booksByCategory.Fiction.push(cleanedBook);  // Add cleaned book to Fiction category\n      booksFetched++;\n    });\n\n    // Update startIndex for the next batch\n    startIndex += 40;\n\n    // Stop if there are no more books in the response\n    if (!data.items || data.items.length === 0) {\n      break;\n    }\n  }\n\n  // Log the booksByCategory to see the results\n  console.log(booksByCategory); // You can check the structure in the console.\n  return booksByCategory;  // Return the books organized by category\n};"],"mappings":"AAAA,OAAO,IAAIA,eAAe,GAAG,CAAC,CAAC;;AAE/B;AACA,MAAMC,aAAa,GAAIC,IAAI,IAAK;EAC9B,OAAO;IACLC,KAAK,EAAED,IAAI,CAACC,KAAK,IAAI,aAAa;IAClCC,QAAQ,EAAEF,IAAI,CAACE,QAAQ,IAAI,aAAa;IACxCC,OAAO,EAAGH,IAAI,CAACG,OAAO,IAAIH,IAAI,CAACG,OAAO,CAACC,MAAM,GAAG,CAAC,GAAIJ,IAAI,CAACG,OAAO,CAACE,IAAI,CAAC,IAAI,CAAC,GAAG,aAAa;IAC5FC,SAAS,EAAEN,IAAI,CAACM,SAAS,IAAI,aAAa;IAC1CC,WAAW,EAAEP,IAAI,CAACO,WAAW,IAAI,aAAa;IAC9CC,SAAS,EAAER,IAAI,CAACQ,SAAS,IAAI,aAAa;IAC1CC,UAAU,EAAET,IAAI,CAACS,UAAU,IAAIT,IAAI,CAACS,UAAU,CAACL,MAAM,GAAG,CAAC,GAAGJ,IAAI,CAACS,UAAU,CAACJ,IAAI,CAAC,IAAI,CAAC,GAAG,aAAa;IACtGK,MAAM,EAAEV,IAAI,CAACW,aAAa,IAAI,aAAa;IAC3CC,cAAc,EAAEZ,IAAI,CAACY,cAAc,IAAI,aAAa;IACpDC,KAAK,EAAEb,IAAI,CAACc,UAAU,GAAGd,IAAI,CAACc,UAAU,CAACC,SAAS,GAAG;EACvD,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,SAAS,IAAK;EACpD,IAAIC,YAAY,GAAG,CAAC;EACpB,IAAIC,UAAU,GAAG,CAAC;EAClB,IAAIrB,eAAe,GAAG;IACpBsB,OAAO,EAAE;EACX,CAAC;;EAED;EACA,OAAOF,YAAY,GAAGD,SAAS,EAAE;IAC/B,MAAMI,cAAc,GAAGJ,SAAS,GAAGC,YAAY;IAC/C,MAAMI,gBAAgB,GAAGC,IAAI,CAACC,GAAG,CAACH,cAAc,EAAE,EAAE,CAAC,CAAC,CAAC;;IAEvD,IAAII,QAAQ,GAAG,MAAMC,KAAK,CAAC,oEAAoEJ,gBAAgB,eAAeH,UAAU,EAAE,CAAC;IAC3I,IAAIQ,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;IAEhC;IACAD,IAAI,CAACE,KAAK,CAACC,OAAO,CAACC,IAAI,IAAI;MACzB,MAAMC,QAAQ,GAAGD,IAAI,CAACE,UAAU;MAChC,MAAMC,WAAW,GAAGnC,aAAa,CAACiC,QAAQ,CAAC,CAAC,CAAC;MAC7ClC,eAAe,CAACsB,OAAO,CAACe,IAAI,CAACD,WAAW,CAAC,CAAC,CAAE;MAC5ChB,YAAY,EAAE;IAChB,CAAC,CAAC;;IAEF;IACAC,UAAU,IAAI,EAAE;;IAEhB;IACA,IAAI,CAACQ,IAAI,CAACE,KAAK,IAAIF,IAAI,CAACE,KAAK,CAACzB,MAAM,KAAK,CAAC,EAAE;MAC1C;IACF;EACF;;EAEA;EACAgC,OAAO,CAACC,GAAG,CAACvC,eAAe,CAAC,CAAC,CAAC;EAC9B,OAAOA,eAAe,CAAC,CAAE;AAC3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}